{"ast":null,"code":"// import React, { useState, useRef, useEffect } from 'react';\n// import Header from '../components/Header';\n// import './UploadNotes.css';\n\n// function UploadNotes() {\n//   const [folders, setFolders] = useState([\n//     { name: 'Math', files: ['file1.pdf', 'file2.pdf'], subfolders: [] },\n//     { name: 'Science', files: ['file3.pdf'], subfolders: [] }\n//   ]);\n//   const [currentFolder, setCurrentFolder] = useState(null);\n//   const [showMenu, setShowMenu] = useState(null);\n//   const [showActionMenu, setShowActionMenu] = useState(false);\n//   const menuRef = useRef(null);\n//   const [newFolderName, setNewFolderName] = useState('');\n\n//   useEffect(() => {\n//     const handleClickOutside = (event) => {\n//       if (menuRef.current && !menuRef.current.contains(event.target)) {\n//         setShowMenu(null);\n//         setShowActionMenu(false);\n//       }\n//     };\n//     document.addEventListener(\"mousedown\", handleClickOutside);\n//     return () => {\n//       document.removeEventListener(\"mousedown\", handleClickOutside);\n//     };\n//   }, []);\n\n//   const handleAddFolder = () => {\n//     if (newFolderName.trim()) {\n//       setFolders([...folders, { name: newFolderName, files: [], subfolders: [] }]);\n//       setNewFolderName('');\n//     }\n//   };\n\n//   const handleSelectFolder = (folder) => {\n//     setCurrentFolder(folder);\n//   };\n\n//   const toggleActionMenu = () => {\n//     setShowActionMenu(!showActionMenu);\n//   };\n\n//   return (\n//     <div className=\"upload-notes-page\">\n//       <div className=\"sidebar\">\n//         <div className=\"sidebar-header\">\n//           <h3>Folders</h3>\n//           <span className=\"add-icon\" onClick={toggleActionMenu}>+</span>\n//           {showActionMenu && (\n//             <div className=\"action-menu\" ref={menuRef}>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"New Folder Name\"\n//                 value={newFolderName}\n//                 onChange={(e) => setNewFolderName(e.target.value)}\n//               />\n//               <button onClick={handleAddFolder}>Add Folder</button>\n//             </div>\n//           )}\n//         </div>\n//         <ul className=\"folder-list\">\n//           {folders.map((folder, index) => (\n//             <li key={index} className=\"folder-header\" onClick={() => handleSelectFolder(folder)}>\n//               {folder.name}\n//               <span className=\"menu-icon\" onClick={() => setShowMenu(folder.name)}>⋮</span>\n//               {showMenu === folder.name && (\n//                 <div className=\"dropdown-menu\" ref={menuRef}>\n//                   <button>Edit</button>\n//                   <button>Delete</button>\n//                 </div>\n//               )}\n//               <ul className=\"file-list\">\n//                 {folder.files.map((file, idx) => (\n//                   <li key={idx} className=\"file-item\">\n//                     {file}\n//                     <span className=\"menu-icon\">⋮</span>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"content\">\n//       <Header />\n//         {currentFolder ? (\n//           <>\n//             <h3>{currentFolder.name} Notes</h3>\n//             <p>Select options in the sidebar to manage files and folders.</p>\n//           </>\n//         ) : (\n//           <p>Select a folder from the sidebar to view its contents.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default UploadNotes;\n\n// Google Drive API settings\n/* global gapi */\n\n// Google Drive API settings\nconst API_KEY = \"AIzaSyCjEU-U-ki8zWfYNXSV5ADFcJSLsPCEuhs\";\nconst CLIENT_ID = \"898750108776-iq2digsu2i6j9c7drvpd5bg700didsim.apps.googleusercontent.com\"; // Replace with your client ID\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\n\n// Load Google API client library\nfunction loadGapiClient() {\n  return new Promise((resolve, reject) => {\n    gapi.load('client:auth2', {\n      callback: resolve,\n      onerror: reject\n    });\n  });\n}\n\n// Initialize Google API client for Drive operations\nasync function initClient() {\n  try {\n    await loadGapiClient();\n    await gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      scope: SCOPES,\n      discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"]\n    });\n    gapi.auth2.getAuthInstance().signIn();\n  } catch (error) {\n    console.error(\"Error loading gapi client:\", error);\n  }\n}\n\n// Select a base folder in Google Drive\nasync function selectBaseFolder() {\n  const response = await gapi.client.drive.files.list({\n    q: \"mimeType='application/vnd.google-apps.folder' and trashed=false\",\n    fields: \"files(id, name)\"\n  });\n  displayFolderOptions(response.result.files);\n}\n\n// Display folder options for the user to choose a base folder\nfunction displayFolderOptions(folders) {\n  const folderSelect = document.getElementById(\"baseFolderSelect\");\n  folderSelect.innerHTML = '';\n  folders.forEach(folder => {\n    const option = document.createElement(\"option\");\n    option.value = folder.id;\n    option.textContent = folder.name;\n    folderSelect.appendChild(option);\n  });\n}\n\n// Upload a note to the selected base folder in Google Drive\nasync function uploadNote() {\n  const fileInput = document.getElementById(\"noteFile\");\n  const baseFolderId = document.getElementById(\"baseFolderSelect\").value;\n  const file = fileInput.files[0];\n  const metadata = {\n    'name': file.name,\n    'parents': [baseFolderId]\n  };\n  const form = new FormData();\n  form.append(\"metadata\", new Blob([JSON.stringify(metadata)], {\n    type: \"application/json\"\n  }));\n  form.append(\"file\", file);\n  await fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"Authorization\": \"Bearer \" + gapi.auth.getToken().access_token\n    }),\n    body: form\n  });\n  alert(\"Note uploaded successfully.\");\n}\n\n// Display notes within the selected base folder\nasync function viewNotes() {\n  const baseFolderId = document.getElementById(\"baseFolderSelect\").value;\n  const response = await gapi.client.drive.files.list({\n    q: `'${baseFolderId}' in parents and trashed=false`,\n    fields: \"files(id, name, mimeType)\"\n  });\n  const notesContainer = document.getElementById(\"notesContainer\");\n  notesContainer.innerHTML = '';\n  response.result.files.forEach(file => {\n    const noteElement = document.createElement(\"div\");\n    noteElement.className = \"note\";\n    noteElement.textContent = file.name;\n    notesContainer.appendChild(noteElement);\n  });\n}\n\n// Event listeners for buttons\ndocument.getElementById(\"selectBaseFolderBtn\").addEventListener(\"click\", selectBaseFolder);\ndocument.getElementById(\"uploadBtn\").addEventListener(\"click\", uploadNote);\ndocument.getElementById(\"viewNotesBtn\").addEventListener(\"click\", viewNotes);\n\n// Initialize the app when the page loads\nwindow.onload = initClient;","map":{"version":3,"names":["API_KEY","CLIENT_ID","SCOPES","loadGapiClient","Promise","resolve","reject","gapi","load","callback","onerror","initClient","client","init","apiKey","clientId","scope","discoveryDocs","auth2","getAuthInstance","signIn","error","console","selectBaseFolder","response","drive","files","list","q","fields","displayFolderOptions","result","folders","folderSelect","document","getElementById","innerHTML","forEach","folder","option","createElement","value","id","textContent","name","appendChild","uploadNote","fileInput","baseFolderId","file","metadata","form","FormData","append","Blob","JSON","stringify","type","fetch","method","headers","Headers","auth","getToken","access_token","body","alert","viewNotes","notesContainer","noteElement","className","addEventListener","window","onload"],"sources":["/home/sv/LazyHacks/study-tracker-ui/src/pages/UploadNotes.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import Header from '../components/Header';\n// import './UploadNotes.css';\n\n// function UploadNotes() {\n//   const [folders, setFolders] = useState([\n//     { name: 'Math', files: ['file1.pdf', 'file2.pdf'], subfolders: [] },\n//     { name: 'Science', files: ['file3.pdf'], subfolders: [] }\n//   ]);\n//   const [currentFolder, setCurrentFolder] = useState(null);\n//   const [showMenu, setShowMenu] = useState(null);\n//   const [showActionMenu, setShowActionMenu] = useState(false);\n//   const menuRef = useRef(null);\n//   const [newFolderName, setNewFolderName] = useState('');\n\n//   useEffect(() => {\n//     const handleClickOutside = (event) => {\n//       if (menuRef.current && !menuRef.current.contains(event.target)) {\n//         setShowMenu(null);\n//         setShowActionMenu(false);\n//       }\n//     };\n//     document.addEventListener(\"mousedown\", handleClickOutside);\n//     return () => {\n//       document.removeEventListener(\"mousedown\", handleClickOutside);\n//     };\n//   }, []);\n\n//   const handleAddFolder = () => {\n//     if (newFolderName.trim()) {\n//       setFolders([...folders, { name: newFolderName, files: [], subfolders: [] }]);\n//       setNewFolderName('');\n//     }\n//   };\n\n//   const handleSelectFolder = (folder) => {\n//     setCurrentFolder(folder);\n//   };\n\n//   const toggleActionMenu = () => {\n//     setShowActionMenu(!showActionMenu);\n//   };\n\n//   return (\n//     <div className=\"upload-notes-page\">\n//       <div className=\"sidebar\">\n//         <div className=\"sidebar-header\">\n//           <h3>Folders</h3>\n//           <span className=\"add-icon\" onClick={toggleActionMenu}>+</span>\n//           {showActionMenu && (\n//             <div className=\"action-menu\" ref={menuRef}>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"New Folder Name\"\n//                 value={newFolderName}\n//                 onChange={(e) => setNewFolderName(e.target.value)}\n//               />\n//               <button onClick={handleAddFolder}>Add Folder</button>\n//             </div>\n//           )}\n//         </div>\n//         <ul className=\"folder-list\">\n//           {folders.map((folder, index) => (\n//             <li key={index} className=\"folder-header\" onClick={() => handleSelectFolder(folder)}>\n//               {folder.name}\n//               <span className=\"menu-icon\" onClick={() => setShowMenu(folder.name)}>⋮</span>\n//               {showMenu === folder.name && (\n//                 <div className=\"dropdown-menu\" ref={menuRef}>\n//                   <button>Edit</button>\n//                   <button>Delete</button>\n//                 </div>\n//               )}\n//               <ul className=\"file-list\">\n//                 {folder.files.map((file, idx) => (\n//                   <li key={idx} className=\"file-item\">\n//                     {file}\n//                     <span className=\"menu-icon\">⋮</span>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"content\">\n//       <Header />\n//         {currentFolder ? (\n//           <>\n//             <h3>{currentFolder.name} Notes</h3>\n//             <p>Select options in the sidebar to manage files and folders.</p>\n//           </>\n//         ) : (\n//           <p>Select a folder from the sidebar to view its contents.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default UploadNotes;\n\n// Google Drive API settings\n/* global gapi */\n\n// Google Drive API settings\nconst API_KEY = \"AIzaSyCjEU-U-ki8zWfYNXSV5ADFcJSLsPCEuhs\";\nconst CLIENT_ID = \"898750108776-iq2digsu2i6j9c7drvpd5bg700didsim.apps.googleusercontent.com\"; // Replace with your client ID\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\n\n\n// Load Google API client library\nfunction loadGapiClient() {\n    return new Promise((resolve, reject) => {\n        gapi.load('client:auth2', {\n            callback: resolve,\n            onerror: reject,\n        });\n    });\n}\n\n// Initialize Google API client for Drive operations\nasync function initClient() {\n    try {\n        await loadGapiClient();\n        await gapi.client.init({\n            apiKey: API_KEY,\n            clientId: CLIENT_ID,\n            scope: SCOPES,\n            discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"]\n        });\n        gapi.auth2.getAuthInstance().signIn();\n    } catch (error) {\n        console.error(\"Error loading gapi client:\", error);\n    }\n}\n\n// Select a base folder in Google Drive\nasync function selectBaseFolder() {\n    const response = await gapi.client.drive.files.list({\n        q: \"mimeType='application/vnd.google-apps.folder' and trashed=false\",\n        fields: \"files(id, name)\"\n    });\n    displayFolderOptions(response.result.files);\n}\n\n// Display folder options for the user to choose a base folder\nfunction displayFolderOptions(folders) {\n    const folderSelect = document.getElementById(\"baseFolderSelect\");\n    folderSelect.innerHTML = '';\n    folders.forEach(folder => {\n        const option = document.createElement(\"option\");\n        option.value = folder.id;\n        option.textContent = folder.name;\n        folderSelect.appendChild(option);\n    });\n}\n\n// Upload a note to the selected base folder in Google Drive\nasync function uploadNote() {\n    const fileInput = document.getElementById(\"noteFile\");\n    const baseFolderId = document.getElementById(\"baseFolderSelect\").value;\n    const file = fileInput.files[0];\n    \n    const metadata = {\n        'name': file.name,\n        'parents': [baseFolderId]\n    };\n    \n    const form = new FormData();\n    form.append(\"metadata\", new Blob([JSON.stringify(metadata)], { type: \"application/json\" }));\n    form.append(\"file\", file);\n\n    await fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart\", {\n        method: \"POST\",\n        headers: new Headers({ \"Authorization\": \"Bearer \" + gapi.auth.getToken().access_token }),\n        body: form\n    });\n    alert(\"Note uploaded successfully.\");\n}\n\n// Display notes within the selected base folder\nasync function viewNotes() {\n    const baseFolderId = document.getElementById(\"baseFolderSelect\").value;\n    const response = await gapi.client.drive.files.list({\n        q: `'${baseFolderId}' in parents and trashed=false`,\n        fields: \"files(id, name, mimeType)\"\n    });\n    const notesContainer = document.getElementById(\"notesContainer\");\n    notesContainer.innerHTML = '';\n    \n    response.result.files.forEach(file => {\n        const noteElement = document.createElement(\"div\");\n        noteElement.className = \"note\";\n        noteElement.textContent = file.name;\n        notesContainer.appendChild(noteElement);\n    });\n}\n\n// Event listeners for buttons\ndocument.getElementById(\"selectBaseFolderBtn\").addEventListener(\"click\", selectBaseFolder);\ndocument.getElementById(\"uploadBtn\").addEventListener(\"click\", uploadNote);\ndocument.getElementById(\"viewNotesBtn\").addEventListener(\"click\", viewNotes);\n\n// Initialize the app when the page loads\nwindow.onload = initClient;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAMA,OAAO,GAAG,yCAAyC;AACzD,MAAMC,SAAS,GAAG,0EAA0E,CAAC,CAAC;AAC9F,MAAMC,MAAM,GAAG,4CAA4C;;AAG3D;AACA,SAASC,cAAcA,CAAA,EAAG;EACtB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCC,IAAI,CAACC,IAAI,CAAC,cAAc,EAAE;MACtBC,QAAQ,EAAEJ,OAAO;MACjBK,OAAO,EAAEJ;IACb,CAAC,CAAC;EACN,CAAC,CAAC;AACN;;AAEA;AACA,eAAeK,UAAUA,CAAA,EAAG;EACxB,IAAI;IACA,MAAMR,cAAc,CAAC,CAAC;IACtB,MAAMI,IAAI,CAACK,MAAM,CAACC,IAAI,CAAC;MACnBC,MAAM,EAAEd,OAAO;MACfe,QAAQ,EAAEd,SAAS;MACnBe,KAAK,EAAEd,MAAM;MACbe,aAAa,EAAE,CAAC,4DAA4D;IAChF,CAAC,CAAC;IACFV,IAAI,CAACW,KAAK,CAACC,eAAe,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACtD;AACJ;;AAEA;AACA,eAAeE,gBAAgBA,CAAA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}