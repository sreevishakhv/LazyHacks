{"ast":null,"code":"import { getChecksum } from \"./getChecksum\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nexport const validateChecksumFromResponse = async (response, {\n  config,\n  responseAlgorithms\n}) => {\n  const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);\n  const {\n    body: responseBody,\n    headers: responseHeaders\n  } = response;\n  for (const algorithm of checksumAlgorithms) {\n    const responseHeader = getChecksumLocationName(algorithm);\n    const checksumFromResponse = responseHeaders[responseHeader];\n    if (checksumFromResponse) {\n      const checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);\n      const {\n        streamHasher,\n        base64Encoder\n      } = config;\n      const checksum = await getChecksum(responseBody, {\n        streamHasher,\n        checksumAlgorithmFn,\n        base64Encoder\n      });\n      if (checksum === checksumFromResponse) {\n        break;\n      }\n      throw new Error(`Checksum mismatch: expected \"${checksum}\" but received \"${checksumFromResponse}\"` + ` in response header \"${responseHeader}\".`);\n    }\n  }\n};","map":{"version":3,"names":["getChecksum","getChecksumAlgorithmListForResponse","getChecksumLocationName","selectChecksumAlgorithmFunction","validateChecksumFromResponse","response","config","responseAlgorithms","checksumAlgorithms","body","responseBody","headers","responseHeaders","algorithm","responseHeader","checksumFromResponse","checksumAlgorithmFn","streamHasher","base64Encoder","checksum","Error"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js"],"sourcesContent":["import { getChecksum } from \"./getChecksum\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nexport const validateChecksumFromResponse = async (response, { config, responseAlgorithms }) => {\n    const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);\n    const { body: responseBody, headers: responseHeaders } = response;\n    for (const algorithm of checksumAlgorithms) {\n        const responseHeader = getChecksumLocationName(algorithm);\n        const checksumFromResponse = responseHeaders[responseHeader];\n        if (checksumFromResponse) {\n            const checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);\n            const { streamHasher, base64Encoder } = config;\n            const checksum = await getChecksum(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });\n            if (checksum === checksumFromResponse) {\n                break;\n            }\n            throw new Error(`Checksum mismatch: expected \"${checksum}\" but received \"${checksumFromResponse}\"` +\n                ` in response header \"${responseHeader}\".`);\n        }\n    }\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,OAAO,MAAMC,4BAA4B,GAAG,MAAAA,CAAOC,QAAQ,EAAE;EAAEC,MAAM;EAAEC;AAAmB,CAAC,KAAK;EAC5F,MAAMC,kBAAkB,GAAGP,mCAAmC,CAACM,kBAAkB,CAAC;EAClF,MAAM;IAAEE,IAAI,EAAEC,YAAY;IAAEC,OAAO,EAAEC;EAAgB,CAAC,GAAGP,QAAQ;EACjE,KAAK,MAAMQ,SAAS,IAAIL,kBAAkB,EAAE;IACxC,MAAMM,cAAc,GAAGZ,uBAAuB,CAACW,SAAS,CAAC;IACzD,MAAME,oBAAoB,GAAGH,eAAe,CAACE,cAAc,CAAC;IAC5D,IAAIC,oBAAoB,EAAE;MACtB,MAAMC,mBAAmB,GAAGb,+BAA+B,CAACU,SAAS,EAAEP,MAAM,CAAC;MAC9E,MAAM;QAAEW,YAAY;QAAEC;MAAc,CAAC,GAAGZ,MAAM;MAC9C,MAAMa,QAAQ,GAAG,MAAMnB,WAAW,CAACU,YAAY,EAAE;QAAEO,YAAY;QAAED,mBAAmB;QAAEE;MAAc,CAAC,CAAC;MACtG,IAAIC,QAAQ,KAAKJ,oBAAoB,EAAE;QACnC;MACJ;MACA,MAAM,IAAIK,KAAK,CAAC,gCAAgCD,QAAQ,mBAAmBJ,oBAAoB,GAAG,GAC9F,wBAAwBD,cAAc,IAAI,CAAC;IACnD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}