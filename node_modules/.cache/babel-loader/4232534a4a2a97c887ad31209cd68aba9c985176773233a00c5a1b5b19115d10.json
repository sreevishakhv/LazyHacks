{"ast":null,"code":"import { httpSigningMiddlewareOptions } from \"@smithy/core\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { SMITHY_CONTEXT_KEY } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { signS3Express } from \"./signS3Express\";\nconst defaultErrorHandler = signingProperties => error => {\n  throw error;\n};\nconst defaultSuccessHandler = (httpResponse, signingProperties) => {};\nexport const s3ExpressHttpSigningMiddlewareOptions = httpSigningMiddlewareOptions;\nexport const s3ExpressHttpSigningMiddleware = config => (next, context) => async args => {\n  if (!HttpRequest.isInstance(args.request)) {\n    return next(args);\n  }\n  const smithyContext = getSmithyContext(context);\n  const scheme = smithyContext.selectedHttpAuthScheme;\n  if (!scheme) {\n    throw new Error(`No HttpAuthScheme was selected: unable to sign request`);\n  }\n  const {\n    httpAuthOption: {\n      signingProperties = {}\n    },\n    identity,\n    signer\n  } = scheme;\n  let request;\n  if (context.s3ExpressIdentity) {\n    request = await signS3Express(context.s3ExpressIdentity, signingProperties, args.request, await config.signer());\n  } else {\n    request = await signer.sign(args.request, identity, signingProperties);\n  }\n  const output = await next({\n    ...args,\n    request\n  }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));\n  (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);\n  return output;\n};\nexport const getS3ExpressHttpSigningPlugin = config => ({\n  applyToStack: clientStack => {\n    clientStack.addRelativeTo(s3ExpressHttpSigningMiddleware(config), httpSigningMiddlewareOptions);\n  }\n});","map":{"version":3,"names":["httpSigningMiddlewareOptions","HttpRequest","SMITHY_CONTEXT_KEY","getSmithyContext","signS3Express","defaultErrorHandler","signingProperties","error","defaultSuccessHandler","httpResponse","s3ExpressHttpSigningMiddlewareOptions","s3ExpressHttpSigningMiddleware","config","next","context","args","isInstance","request","smithyContext","scheme","selectedHttpAuthScheme","Error","httpAuthOption","identity","signer","s3ExpressIdentity","sign","output","catch","errorHandler","successHandler","response","getS3ExpressHttpSigningPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/s3ExpressHttpSigningMiddleware.js"],"sourcesContent":["import { httpSigningMiddlewareOptions } from \"@smithy/core\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { SMITHY_CONTEXT_KEY, } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { signS3Express } from \"./signS3Express\";\nconst defaultErrorHandler = (signingProperties) => (error) => {\n    throw error;\n};\nconst defaultSuccessHandler = (httpResponse, signingProperties) => { };\nexport const s3ExpressHttpSigningMiddlewareOptions = httpSigningMiddlewareOptions;\nexport const s3ExpressHttpSigningMiddleware = (config) => (next, context) => async (args) => {\n    if (!HttpRequest.isInstance(args.request)) {\n        return next(args);\n    }\n    const smithyContext = getSmithyContext(context);\n    const scheme = smithyContext.selectedHttpAuthScheme;\n    if (!scheme) {\n        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);\n    }\n    const { httpAuthOption: { signingProperties = {} }, identity, signer, } = scheme;\n    let request;\n    if (context.s3ExpressIdentity) {\n        request = await signS3Express(context.s3ExpressIdentity, signingProperties, args.request, await config.signer());\n    }\n    else {\n        request = await signer.sign(args.request, identity, signingProperties);\n    }\n    const output = await next({\n        ...args,\n        request,\n    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));\n    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);\n    return output;\n};\nexport const getS3ExpressHttpSigningPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(s3ExpressHttpSigningMiddleware(config), httpSigningMiddlewareOptions);\n    },\n});\n"],"mappings":"AAAA,SAASA,4BAA4B,QAAQ,cAAc;AAC3D,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,kBAAkB,QAAS,eAAe;AACnD,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAMC,mBAAmB,GAAIC,iBAAiB,IAAMC,KAAK,IAAK;EAC1D,MAAMA,KAAK;AACf,CAAC;AACD,MAAMC,qBAAqB,GAAGA,CAACC,YAAY,EAAEH,iBAAiB,KAAK,CAAE,CAAC;AACtE,OAAO,MAAMI,qCAAqC,GAAGV,4BAA4B;AACjF,OAAO,MAAMW,8BAA8B,GAAIC,MAAM,IAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EACzF,IAAI,CAACd,WAAW,CAACe,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC,EAAE;IACvC,OAAOJ,IAAI,CAACE,IAAI,CAAC;EACrB;EACA,MAAMG,aAAa,GAAGf,gBAAgB,CAACW,OAAO,CAAC;EAC/C,MAAMK,MAAM,GAAGD,aAAa,CAACE,sBAAsB;EACnD,IAAI,CAACD,MAAM,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,wDAAwD,CAAC;EAC7E;EACA,MAAM;IAAEC,cAAc,EAAE;MAAEhB,iBAAiB,GAAG,CAAC;IAAE,CAAC;IAAEiB,QAAQ;IAAEC;EAAQ,CAAC,GAAGL,MAAM;EAChF,IAAIF,OAAO;EACX,IAAIH,OAAO,CAACW,iBAAiB,EAAE;IAC3BR,OAAO,GAAG,MAAMb,aAAa,CAACU,OAAO,CAACW,iBAAiB,EAAEnB,iBAAiB,EAAES,IAAI,CAACE,OAAO,EAAE,MAAML,MAAM,CAACY,MAAM,CAAC,CAAC,CAAC;EACpH,CAAC,MACI;IACDP,OAAO,GAAG,MAAMO,MAAM,CAACE,IAAI,CAACX,IAAI,CAACE,OAAO,EAAEM,QAAQ,EAAEjB,iBAAiB,CAAC;EAC1E;EACA,MAAMqB,MAAM,GAAG,MAAMd,IAAI,CAAC;IACtB,GAAGE,IAAI;IACPE;EACJ,CAAC,CAAC,CAACW,KAAK,CAAC,CAACJ,MAAM,CAACK,YAAY,IAAIxB,mBAAmB,EAAEC,iBAAiB,CAAC,CAAC;EACzE,CAACkB,MAAM,CAACM,cAAc,IAAItB,qBAAqB,EAAEmB,MAAM,CAACI,QAAQ,EAAEzB,iBAAiB,CAAC;EACpF,OAAOqB,MAAM;AACjB,CAAC;AACD,OAAO,MAAMK,6BAA6B,GAAIpB,MAAM,KAAM;EACtDqB,YAAY,EAAGC,WAAW,IAAK;IAC3BA,WAAW,CAACC,aAAa,CAACxB,8BAA8B,CAACC,MAAM,CAAC,EAAEZ,4BAA4B,CAAC;EACnG;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}