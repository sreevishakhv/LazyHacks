{"ast":null,"code":"import { HttpResponse } from \"@smithy/protocol-http\";\nimport { headStream, splitStream } from \"@smithy/util-stream\";\nconst THROW_IF_EMPTY_BODY = {\n  CopyObjectCommand: true,\n  UploadPartCopyCommand: true,\n  CompleteMultipartUploadCommand: true\n};\nconst MAX_BYTES_TO_INSPECT = 3000;\nexport const throw200ExceptionsMiddleware = config => (next, context) => async args => {\n  const result = await next(args);\n  const {\n    response\n  } = result;\n  if (!HttpResponse.isInstance(response)) {\n    return result;\n  }\n  const {\n    statusCode,\n    body: sourceBody\n  } = response;\n  if (statusCode < 200 || statusCode >= 300) {\n    return result;\n  }\n  const isSplittableStream = typeof sourceBody?.stream === \"function\" || typeof sourceBody?.pipe === \"function\" || typeof sourceBody?.tee === \"function\";\n  if (!isSplittableStream) {\n    return result;\n  }\n  let bodyCopy = sourceBody;\n  let body = sourceBody;\n  if (sourceBody && typeof sourceBody === \"object\" && !(sourceBody instanceof Uint8Array)) {\n    [bodyCopy, body] = await splitStream(sourceBody);\n  }\n  response.body = body;\n  const bodyBytes = await collectBody(bodyCopy, {\n    streamCollector: async stream => {\n      return headStream(stream, MAX_BYTES_TO_INSPECT);\n    }\n  });\n  if (typeof bodyCopy?.destroy === \"function\") {\n    bodyCopy.destroy();\n  }\n  const bodyStringTail = config.utf8Encoder(bodyBytes.subarray(bodyBytes.length - 16));\n  if (bodyBytes.length === 0 && THROW_IF_EMPTY_BODY[context.commandName]) {\n    const err = new Error(\"S3 aborted request\");\n    err.name = \"InternalError\";\n    throw err;\n  }\n  if (bodyStringTail && bodyStringTail.endsWith(\"</Error>\")) {\n    response.statusCode = 400;\n  }\n  return result;\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nexport const throw200ExceptionsMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true\n};\nexport const getThrow200ExceptionsPlugin = config => ({\n  applyToStack: clientStack => {\n    clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n  }\n});","map":{"version":3,"names":["HttpResponse","headStream","splitStream","THROW_IF_EMPTY_BODY","CopyObjectCommand","UploadPartCopyCommand","CompleteMultipartUploadCommand","MAX_BYTES_TO_INSPECT","throw200ExceptionsMiddleware","config","next","context","args","result","response","isInstance","statusCode","body","sourceBody","isSplittableStream","stream","pipe","tee","bodyCopy","Uint8Array","bodyBytes","collectBody","streamCollector","destroy","bodyStringTail","utf8Encoder","subarray","length","commandName","err","Error","name","endsWith","streamBody","Promise","resolve","throw200ExceptionsMiddlewareOptions","relation","toMiddleware","tags","override","getThrow200ExceptionsPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js"],"sourcesContent":["import { HttpResponse } from \"@smithy/protocol-http\";\nimport { headStream, splitStream } from \"@smithy/util-stream\";\nconst THROW_IF_EMPTY_BODY = {\n    CopyObjectCommand: true,\n    UploadPartCopyCommand: true,\n    CompleteMultipartUploadCommand: true,\n};\nconst MAX_BYTES_TO_INSPECT = 3000;\nexport const throw200ExceptionsMiddleware = (config) => (next, context) => async (args) => {\n    const result = await next(args);\n    const { response } = result;\n    if (!HttpResponse.isInstance(response)) {\n        return result;\n    }\n    const { statusCode, body: sourceBody } = response;\n    if (statusCode < 200 || statusCode >= 300) {\n        return result;\n    }\n    const isSplittableStream = typeof sourceBody?.stream === \"function\" ||\n        typeof sourceBody?.pipe === \"function\" ||\n        typeof sourceBody?.tee === \"function\";\n    if (!isSplittableStream) {\n        return result;\n    }\n    let bodyCopy = sourceBody;\n    let body = sourceBody;\n    if (sourceBody && typeof sourceBody === \"object\" && !(sourceBody instanceof Uint8Array)) {\n        [bodyCopy, body] = await splitStream(sourceBody);\n    }\n    response.body = body;\n    const bodyBytes = await collectBody(bodyCopy, {\n        streamCollector: async (stream) => {\n            return headStream(stream, MAX_BYTES_TO_INSPECT);\n        },\n    });\n    if (typeof bodyCopy?.destroy === \"function\") {\n        bodyCopy.destroy();\n    }\n    const bodyStringTail = config.utf8Encoder(bodyBytes.subarray(bodyBytes.length - 16));\n    if (bodyBytes.length === 0 && THROW_IF_EMPTY_BODY[context.commandName]) {\n        const err = new Error(\"S3 aborted request\");\n        err.name = \"InternalError\";\n        throw err;\n    }\n    if (bodyStringTail && bodyStringTail.endsWith(\"</Error>\")) {\n        response.statusCode = 400;\n    }\n    return result;\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nexport const throw200ExceptionsMiddlewareOptions = {\n    relation: \"after\",\n    toMiddleware: \"deserializerMiddleware\",\n    tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n    name: \"throw200ExceptionsMiddleware\",\n    override: true,\n};\nexport const getThrow200ExceptionsPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}