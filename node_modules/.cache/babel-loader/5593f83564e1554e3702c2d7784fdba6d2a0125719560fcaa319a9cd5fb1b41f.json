{"ast":null,"code":"import { setFeature } from \"@smithy/core\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = ({\n  config,\n  instructions\n}) => {\n  return (next, context) => async args => {\n    if (config.endpoint) {\n      setFeature(context, \"ENDPOINT_OVERRIDE\", \"N\");\n    }\n    const endpoint = await getEndpointFromInstructions(args.input, {\n      getEndpointParameterInstructions() {\n        return instructions;\n      }\n    }, {\n      ...config\n    }, context);\n    context.endpointV2 = endpoint;\n    context.authSchemes = endpoint.properties?.authSchemes;\n    const authScheme = context.authSchemes?.[0];\n    if (authScheme) {\n      context[\"signing_region\"] = authScheme.signingRegion;\n      context[\"signing_service\"] = authScheme.signingName;\n      const smithyContext = getSmithyContext(context);\n      const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;\n      if (httpAuthOption) {\n        httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {\n          signing_region: authScheme.signingRegion,\n          signingRegion: authScheme.signingRegion,\n          signing_service: authScheme.signingName,\n          signingName: authScheme.signingName,\n          signingRegionSet: authScheme.signingRegionSet\n        }, authScheme.properties);\n      }\n    }\n    return next({\n      ...args\n    });\n  };\n};","map":{"version":3,"names":["setFeature","getSmithyContext","getEndpointFromInstructions","endpointMiddleware","config","instructions","next","context","args","endpoint","input","getEndpointParameterInstructions","endpointV2","authSchemes","properties","authScheme","signingRegion","signingName","smithyContext","httpAuthOption","selectedHttpAuthScheme","signingProperties","Object","assign","signing_region","signing_service","signingRegionSet"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js"],"sourcesContent":["import { setFeature } from \"@smithy/core\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = ({ config, instructions, }) => {\n    return (next, context) => async (args) => {\n        if (config.endpoint) {\n            setFeature(context, \"ENDPOINT_OVERRIDE\", \"N\");\n        }\n        const endpoint = await getEndpointFromInstructions(args.input, {\n            getEndpointParameterInstructions() {\n                return instructions;\n            },\n        }, { ...config }, context);\n        context.endpointV2 = endpoint;\n        context.authSchemes = endpoint.properties?.authSchemes;\n        const authScheme = context.authSchemes?.[0];\n        if (authScheme) {\n            context[\"signing_region\"] = authScheme.signingRegion;\n            context[\"signing_service\"] = authScheme.signingName;\n            const smithyContext = getSmithyContext(context);\n            const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;\n            if (httpAuthOption) {\n                httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {\n                    signing_region: authScheme.signingRegion,\n                    signingRegion: authScheme.signingRegion,\n                    signing_service: authScheme.signingName,\n                    signingName: authScheme.signingName,\n                    signingRegionSet: authScheme.signingRegionSet,\n                }, authScheme.properties);\n            }\n        }\n        return next({\n            ...args,\n        });\n    };\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,2BAA2B,QAAQ,wCAAwC;AACpF,OAAO,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAc,CAAC,KAAK;EAC7D,OAAO,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;IACtC,IAAIJ,MAAM,CAACK,QAAQ,EAAE;MACjBT,UAAU,CAACO,OAAO,EAAE,mBAAmB,EAAE,GAAG,CAAC;IACjD;IACA,MAAME,QAAQ,GAAG,MAAMP,2BAA2B,CAACM,IAAI,CAACE,KAAK,EAAE;MAC3DC,gCAAgCA,CAAA,EAAG;QAC/B,OAAON,YAAY;MACvB;IACJ,CAAC,EAAE;MAAE,GAAGD;IAAO,CAAC,EAAEG,OAAO,CAAC;IAC1BA,OAAO,CAACK,UAAU,GAAGH,QAAQ;IAC7BF,OAAO,CAACM,WAAW,GAAGJ,QAAQ,CAACK,UAAU,EAAED,WAAW;IACtD,MAAME,UAAU,GAAGR,OAAO,CAACM,WAAW,GAAG,CAAC,CAAC;IAC3C,IAAIE,UAAU,EAAE;MACZR,OAAO,CAAC,gBAAgB,CAAC,GAAGQ,UAAU,CAACC,aAAa;MACpDT,OAAO,CAAC,iBAAiB,CAAC,GAAGQ,UAAU,CAACE,WAAW;MACnD,MAAMC,aAAa,GAAGjB,gBAAgB,CAACM,OAAO,CAAC;MAC/C,MAAMY,cAAc,GAAGD,aAAa,EAAEE,sBAAsB,EAAED,cAAc;MAC5E,IAAIA,cAAc,EAAE;QAChBA,cAAc,CAACE,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAACJ,cAAc,CAACE,iBAAiB,IAAI,CAAC,CAAC,EAAE;UACrFG,cAAc,EAAET,UAAU,CAACC,aAAa;UACxCA,aAAa,EAAED,UAAU,CAACC,aAAa;UACvCS,eAAe,EAAEV,UAAU,CAACE,WAAW;UACvCA,WAAW,EAAEF,UAAU,CAACE,WAAW;UACnCS,gBAAgB,EAAEX,UAAU,CAACW;QACjC,CAAC,EAAEX,UAAU,CAACD,UAAU,CAAC;MAC7B;IACJ;IACA,OAAOR,IAAI,CAAC;MACR,GAAGE;IACP,CAAC,CAAC;EACN,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}