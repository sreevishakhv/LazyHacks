{"ast":null,"code":"export var AlgorithmId;\n(function (AlgorithmId) {\n  AlgorithmId[\"MD5\"] = \"md5\";\n  AlgorithmId[\"CRC32\"] = \"crc32\";\n  AlgorithmId[\"CRC32C\"] = \"crc32c\";\n  AlgorithmId[\"SHA1\"] = \"sha1\";\n  AlgorithmId[\"SHA256\"] = \"sha256\";\n})(AlgorithmId || (AlgorithmId = {}));\nexport const getChecksumConfiguration = runtimeConfig => {\n  const checksumAlgorithms = [];\n  if (runtimeConfig.sha256 !== undefined) {\n    checksumAlgorithms.push({\n      algorithmId: () => AlgorithmId.SHA256,\n      checksumConstructor: () => runtimeConfig.sha256\n    });\n  }\n  if (runtimeConfig.md5 != undefined) {\n    checksumAlgorithms.push({\n      algorithmId: () => AlgorithmId.MD5,\n      checksumConstructor: () => runtimeConfig.md5\n    });\n  }\n  return {\n    _checksumAlgorithms: checksumAlgorithms,\n    addChecksumAlgorithm(algo) {\n      this._checksumAlgorithms.push(algo);\n    },\n    checksumAlgorithms() {\n      return this._checksumAlgorithms;\n    }\n  };\n};\nexport const resolveChecksumRuntimeConfig = clientConfig => {\n  const runtimeConfig = {};\n  clientConfig.checksumAlgorithms().forEach(checksumAlgorithm => {\n    runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n  });\n  return runtimeConfig;\n};","map":{"version":3,"names":["AlgorithmId","getChecksumConfiguration","runtimeConfig","checksumAlgorithms","sha256","undefined","push","algorithmId","SHA256","checksumConstructor","md5","MD5","_checksumAlgorithms","addChecksumAlgorithm","algo","resolveChecksumRuntimeConfig","clientConfig","forEach","checksumAlgorithm"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@smithy/types/dist-es/extensions/checksum.js"],"sourcesContent":["export var AlgorithmId;\n(function (AlgorithmId) {\n    AlgorithmId[\"MD5\"] = \"md5\";\n    AlgorithmId[\"CRC32\"] = \"crc32\";\n    AlgorithmId[\"CRC32C\"] = \"crc32c\";\n    AlgorithmId[\"SHA1\"] = \"sha1\";\n    AlgorithmId[\"SHA256\"] = \"sha256\";\n})(AlgorithmId || (AlgorithmId = {}));\nexport const getChecksumConfiguration = (runtimeConfig) => {\n    const checksumAlgorithms = [];\n    if (runtimeConfig.sha256 !== undefined) {\n        checksumAlgorithms.push({\n            algorithmId: () => AlgorithmId.SHA256,\n            checksumConstructor: () => runtimeConfig.sha256,\n        });\n    }\n    if (runtimeConfig.md5 != undefined) {\n        checksumAlgorithms.push({\n            algorithmId: () => AlgorithmId.MD5,\n            checksumConstructor: () => runtimeConfig.md5,\n        });\n    }\n    return {\n        _checksumAlgorithms: checksumAlgorithms,\n        addChecksumAlgorithm(algo) {\n            this._checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms() {\n            return this._checksumAlgorithms;\n        },\n    };\n};\nexport const resolveChecksumRuntimeConfig = (clientConfig) => {\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n};\n"],"mappings":"AAAA,OAAO,IAAIA,WAAW;AACtB,CAAC,UAAUA,WAAW,EAAE;EACpBA,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK;EAC1BA,WAAW,CAAC,OAAO,CAAC,GAAG,OAAO;EAC9BA,WAAW,CAAC,QAAQ,CAAC,GAAG,QAAQ;EAChCA,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM;EAC5BA,WAAW,CAAC,QAAQ,CAAC,GAAG,QAAQ;AACpC,CAAC,EAAEA,WAAW,KAAKA,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AACrC,OAAO,MAAMC,wBAAwB,GAAIC,aAAa,IAAK;EACvD,MAAMC,kBAAkB,GAAG,EAAE;EAC7B,IAAID,aAAa,CAACE,MAAM,KAAKC,SAAS,EAAE;IACpCF,kBAAkB,CAACG,IAAI,CAAC;MACpBC,WAAW,EAAEA,CAAA,KAAMP,WAAW,CAACQ,MAAM;MACrCC,mBAAmB,EAAEA,CAAA,KAAMP,aAAa,CAACE;IAC7C,CAAC,CAAC;EACN;EACA,IAAIF,aAAa,CAACQ,GAAG,IAAIL,SAAS,EAAE;IAChCF,kBAAkB,CAACG,IAAI,CAAC;MACpBC,WAAW,EAAEA,CAAA,KAAMP,WAAW,CAACW,GAAG;MAClCF,mBAAmB,EAAEA,CAAA,KAAMP,aAAa,CAACQ;IAC7C,CAAC,CAAC;EACN;EACA,OAAO;IACHE,mBAAmB,EAAET,kBAAkB;IACvCU,oBAAoBA,CAACC,IAAI,EAAE;MACvB,IAAI,CAACF,mBAAmB,CAACN,IAAI,CAACQ,IAAI,CAAC;IACvC,CAAC;IACDX,kBAAkBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACS,mBAAmB;IACnC;EACJ,CAAC;AACL,CAAC;AACD,OAAO,MAAMG,4BAA4B,GAAIC,YAAY,IAAK;EAC1D,MAAMd,aAAa,GAAG,CAAC,CAAC;EACxBc,YAAY,CAACb,kBAAkB,CAAC,CAAC,CAACc,OAAO,CAAEC,iBAAiB,IAAK;IAC7DhB,aAAa,CAACgB,iBAAiB,CAACX,WAAW,CAAC,CAAC,CAAC,GAAGW,iBAAiB,CAACT,mBAAmB,CAAC,CAAC;EAC5F,CAAC,CAAC;EACF,OAAOP,aAAa;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}