{"ast":null,"code":"import { setFeature } from \"@aws-sdk/core\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { S3_EXPRESS_AUTH_SCHEME, S3_EXPRESS_BACKEND, S3_EXPRESS_BUCKET_TYPE, SESSION_TOKEN_HEADER } from \"../constants\";\nexport const s3ExpressMiddleware = options => {\n  return (next, context) => async args => {\n    if (context.endpointV2) {\n      const endpoint = context.endpointV2;\n      const isS3ExpressAuth = endpoint.properties?.authSchemes?.[0]?.name === S3_EXPRESS_AUTH_SCHEME;\n      const isS3ExpressBucket = endpoint.properties?.backend === S3_EXPRESS_BACKEND || endpoint.properties?.bucketType === S3_EXPRESS_BUCKET_TYPE;\n      if (isS3ExpressBucket) {\n        setFeature(context, \"S3_EXPRESS_BUCKET\", \"J\");\n        context.isS3ExpressBucket = true;\n      }\n      if (isS3ExpressAuth) {\n        const requestBucket = args.input.Bucket;\n        if (requestBucket) {\n          const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(await options.credentials(), {\n            Bucket: requestBucket\n          });\n          context.s3ExpressIdentity = s3ExpressIdentity;\n          if (HttpRequest.isInstance(args.request) && s3ExpressIdentity.sessionToken) {\n            args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;\n          }\n        }\n      }\n    }\n    return next(args);\n  };\n};\nexport const s3ExpressMiddlewareOptions = {\n  name: \"s3ExpressMiddleware\",\n  step: \"build\",\n  tags: [\"S3\", \"S3_EXPRESS\"],\n  override: true\n};\nexport const getS3ExpressPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);\n  }\n});","map":{"version":3,"names":["setFeature","HttpRequest","S3_EXPRESS_AUTH_SCHEME","S3_EXPRESS_BACKEND","S3_EXPRESS_BUCKET_TYPE","SESSION_TOKEN_HEADER","s3ExpressMiddleware","options","next","context","args","endpointV2","endpoint","isS3ExpressAuth","properties","authSchemes","name","isS3ExpressBucket","backend","bucketType","requestBucket","input","Bucket","s3ExpressIdentity","s3ExpressIdentityProvider","getS3ExpressIdentity","credentials","isInstance","request","sessionToken","headers","s3ExpressMiddlewareOptions","step","tags","override","getS3ExpressPlugin","applyToStack","clientStack","add"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/s3ExpressMiddleware.js"],"sourcesContent":["import { setFeature } from \"@aws-sdk/core\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { S3_EXPRESS_AUTH_SCHEME, S3_EXPRESS_BACKEND, S3_EXPRESS_BUCKET_TYPE, SESSION_TOKEN_HEADER } from \"../constants\";\nexport const s3ExpressMiddleware = (options) => {\n    return (next, context) => async (args) => {\n        if (context.endpointV2) {\n            const endpoint = context.endpointV2;\n            const isS3ExpressAuth = endpoint.properties?.authSchemes?.[0]?.name === S3_EXPRESS_AUTH_SCHEME;\n            const isS3ExpressBucket = endpoint.properties?.backend === S3_EXPRESS_BACKEND ||\n                endpoint.properties?.bucketType === S3_EXPRESS_BUCKET_TYPE;\n            if (isS3ExpressBucket) {\n                setFeature(context, \"S3_EXPRESS_BUCKET\", \"J\");\n                context.isS3ExpressBucket = true;\n            }\n            if (isS3ExpressAuth) {\n                const requestBucket = args.input.Bucket;\n                if (requestBucket) {\n                    const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(await options.credentials(), {\n                        Bucket: requestBucket,\n                    });\n                    context.s3ExpressIdentity = s3ExpressIdentity;\n                    if (HttpRequest.isInstance(args.request) && s3ExpressIdentity.sessionToken) {\n                        args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;\n                    }\n                }\n            }\n        }\n        return next(args);\n    };\n};\nexport const s3ExpressMiddlewareOptions = {\n    name: \"s3ExpressMiddleware\",\n    step: \"build\",\n    tags: [\"S3\", \"S3_EXPRESS\"],\n    override: true,\n};\nexport const getS3ExpressPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);\n    },\n});\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,sBAAsB,EAAEC,kBAAkB,EAAEC,sBAAsB,EAAEC,oBAAoB,QAAQ,cAAc;AACvH,OAAO,MAAMC,mBAAmB,GAAIC,OAAO,IAAK;EAC5C,OAAO,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;IACtC,IAAID,OAAO,CAACE,UAAU,EAAE;MACpB,MAAMC,QAAQ,GAAGH,OAAO,CAACE,UAAU;MACnC,MAAME,eAAe,GAAGD,QAAQ,CAACE,UAAU,EAAEC,WAAW,GAAG,CAAC,CAAC,EAAEC,IAAI,KAAKd,sBAAsB;MAC9F,MAAMe,iBAAiB,GAAGL,QAAQ,CAACE,UAAU,EAAEI,OAAO,KAAKf,kBAAkB,IACzES,QAAQ,CAACE,UAAU,EAAEK,UAAU,KAAKf,sBAAsB;MAC9D,IAAIa,iBAAiB,EAAE;QACnBjB,UAAU,CAACS,OAAO,EAAE,mBAAmB,EAAE,GAAG,CAAC;QAC7CA,OAAO,CAACQ,iBAAiB,GAAG,IAAI;MACpC;MACA,IAAIJ,eAAe,EAAE;QACjB,MAAMO,aAAa,GAAGV,IAAI,CAACW,KAAK,CAACC,MAAM;QACvC,IAAIF,aAAa,EAAE;UACf,MAAMG,iBAAiB,GAAG,MAAMhB,OAAO,CAACiB,yBAAyB,CAACC,oBAAoB,CAAC,MAAMlB,OAAO,CAACmB,WAAW,CAAC,CAAC,EAAE;YAChHJ,MAAM,EAAEF;UACZ,CAAC,CAAC;UACFX,OAAO,CAACc,iBAAiB,GAAGA,iBAAiB;UAC7C,IAAItB,WAAW,CAAC0B,UAAU,CAACjB,IAAI,CAACkB,OAAO,CAAC,IAAIL,iBAAiB,CAACM,YAAY,EAAE;YACxEnB,IAAI,CAACkB,OAAO,CAACE,OAAO,CAACzB,oBAAoB,CAAC,GAAGkB,iBAAiB,CAACM,YAAY;UAC/E;QACJ;MACJ;IACJ;IACA,OAAOrB,IAAI,CAACE,IAAI,CAAC;EACrB,CAAC;AACL,CAAC;AACD,OAAO,MAAMqB,0BAA0B,GAAG;EACtCf,IAAI,EAAE,qBAAqB;EAC3BgB,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC;EAC1BC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,MAAMC,kBAAkB,GAAI5B,OAAO,KAAM;EAC5C6B,YAAY,EAAGC,WAAW,IAAK;IAC3BA,WAAW,CAACC,GAAG,CAAChC,mBAAmB,CAACC,OAAO,CAAC,EAAEwB,0BAA0B,CAAC;EAC7E;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}