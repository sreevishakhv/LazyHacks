{"ast":null,"code":"var _jsxFileName = \"/home/sv/LazyHacks/study-tracker-ui/src/pages/GoogleDriveNotes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './GoogleDriveNotes.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GoogleDriveNotes() {\n  _s();\n  const [fileTree, setFileTree] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n  const [sidebarWidth, setSidebarWidth] = useState(250);\n  const [isSidebarVisible, setIsSidebarVisible] = useState(true);\n  useEffect(() => {\n    fetchFileTree();\n  }, []);\n  const fetchFileTree = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/files');\n      setFileTree(response.data);\n    } catch (error) {\n      console.error('Error fetching file tree:', error);\n    }\n  };\n  const fetchFileContent = async filePath => {\n    try {\n      setSelectedFile(filePath);\n      const mimeType = getMimeType(filePath);\n\n      // Fetch content if it's a text-based file, otherwise, create a URL to display directly\n      if (mimeType.startsWith('text/')) {\n        const response = await axios.get(`http://localhost:5000/api/files/content?path=${filePath}`, {\n          responseType: 'text'\n        });\n        setFileContent(response.data);\n      } else {\n        const response = await axios.get(`http://localhost:5000/api/files/content?path=${filePath}`, {\n          responseType: 'arraybuffer'\n        });\n        setFileContent(URL.createObjectURL(new Blob([response.data], {\n          type: mimeType\n        })));\n      }\n    } catch (error) {\n      console.error('Error fetching file content:', error);\n    }\n  };\n  const getMimeType = filePath => {\n    const ext = filePath.split('.').pop().toLowerCase();\n    switch (ext) {\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return 'image/' + ext;\n      case 'pdf':\n        return 'application/pdf';\n      case 'mp4':\n      case 'webm':\n        return 'video/' + ext;\n      case 'txt':\n      case 'md':\n        return 'text/plain';\n      default:\n        return '';\n    }\n  };\n  const toggleSidebar = () => {\n    setIsSidebarVisible(!isSidebarVisible);\n  };\n  const renderFileContent = () => {\n    const mimeType = getMimeType(selectedFile);\n    if (mimeType.startsWith('image/')) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: fileContent,\n        alt: \"Preview\",\n        className: \"file-viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 14\n      }, this);\n    } else if (mimeType === 'application/pdf') {\n      return /*#__PURE__*/_jsxDEV(\"embed\", {\n        src: fileContent,\n        type: \"application/pdf\",\n        width: \"100%\",\n        height: \"600px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 14\n      }, this);\n    } else if (mimeType.startsWith('video/')) {\n      return /*#__PURE__*/_jsxDEV(\"video\", {\n        controls: true,\n        className: \"file-viewer\",\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: fileContent,\n          type: mimeType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    } else if (mimeType.startsWith('text/')) {\n      return /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"text-viewer\",\n        children: fileContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Unsupported file format.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  const renderFileTree = tree => {\n    return tree.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-tree-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `file-tree-entry ${item.type}`,\n        onClick: () => item.type === 'file' ? fetchFileContent(item.path) : null,\n        children: [item.type === 'folder' ? '📁' : '📄', \" \", item.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), item.type === 'folder' && item.contents && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-tree-contents\",\n        children: renderFileTree(item.contents)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, item.path, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-browser-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"toggle-sidebar\",\n      onClick: toggleSidebar,\n      children: isSidebarVisible ? 'Hide Sidebar' : 'Show Sidebar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), isSidebarVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-tree-sidebar\",\n      style: {\n        width: sidebarWidth\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Browser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), renderFileTree(fileTree)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-content\",\n      children: selectedFile ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Viewing: \", selectedFile]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), renderFileContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a file to view its content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleDriveNotes, \"ZdqyLQsF7AqNpFZJfO+D26zTT98=\");\n_c = GoogleDriveNotes;\nexport default GoogleDriveNotes;\nvar _c;\n$RefreshReg$(_c, \"GoogleDriveNotes\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GoogleDriveNotes","_s","fileTree","setFileTree","selectedFile","setSelectedFile","fileContent","setFileContent","sidebarWidth","setSidebarWidth","isSidebarVisible","setIsSidebarVisible","fetchFileTree","response","get","data","error","console","fetchFileContent","filePath","mimeType","getMimeType","startsWith","responseType","URL","createObjectURL","Blob","type","ext","split","pop","toLowerCase","toggleSidebar","renderFileContent","src","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","width","height","controls","children","renderFileTree","tree","map","item","onClick","path","name","contents","style","_c","$RefreshReg$"],"sources":["/home/sv/LazyHacks/study-tracker-ui/src/pages/GoogleDriveNotes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './GoogleDriveNotes.css';\n\nfunction GoogleDriveNotes() {\n  const [fileTree, setFileTree] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n  const [sidebarWidth, setSidebarWidth] = useState(250);\n  const [isSidebarVisible, setIsSidebarVisible] = useState(true);\n\n  useEffect(() => {\n    fetchFileTree();\n  }, []);\n\n  const fetchFileTree = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/files');\n      setFileTree(response.data);\n    } catch (error) {\n      console.error('Error fetching file tree:', error);\n    }\n  };\n\n  const fetchFileContent = async (filePath) => {\n    try {\n      setSelectedFile(filePath);\n      const mimeType = getMimeType(filePath);\n\n      // Fetch content if it's a text-based file, otherwise, create a URL to display directly\n      if (mimeType.startsWith('text/')) {\n        const response = await axios.get(`http://localhost:5000/api/files/content?path=${filePath}`, {\n          responseType: 'text'\n        });\n        setFileContent(response.data);\n      } else {\n        const response = await axios.get(`http://localhost:5000/api/files/content?path=${filePath}`, {\n          responseType: 'arraybuffer'\n        });\n        setFileContent(URL.createObjectURL(new Blob([response.data], { type: mimeType })));\n      }\n    } catch (error) {\n      console.error('Error fetching file content:', error);\n    }\n  };\n\n  const getMimeType = (filePath) => {\n    const ext = filePath.split('.').pop().toLowerCase();\n    switch (ext) {\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return 'image/' + ext;\n      case 'pdf':\n        return 'application/pdf';\n      case 'mp4':\n      case 'webm':\n        return 'video/' + ext;\n      case 'txt':\n      case 'md':\n        return 'text/plain';\n      default:\n        return '';\n    }\n  };\n\n  const toggleSidebar = () => {\n    setIsSidebarVisible(!isSidebarVisible);\n  };\n\n  const renderFileContent = () => {\n    const mimeType = getMimeType(selectedFile);\n\n    if (mimeType.startsWith('image/')) {\n      return <img src={fileContent} alt=\"Preview\" className=\"file-viewer\" />;\n    } else if (mimeType === 'application/pdf') {\n      return <embed src={fileContent} type=\"application/pdf\" width=\"100%\" height=\"600px\" />;\n    } else if (mimeType.startsWith('video/')) {\n      return (\n        <video controls className=\"file-viewer\">\n          <source src={fileContent} type={mimeType} />\n          Your browser does not support the video tag.\n        </video>\n      );\n    } else if (mimeType.startsWith('text/')) {\n      return <pre className=\"text-viewer\">{fileContent}</pre>;\n    } else {\n      return <p>Unsupported file format.</p>;\n    }\n  };\n\n  const renderFileTree = (tree) => {\n    return tree.map((item) => (\n      <div key={item.path} className=\"file-tree-item\">\n        <div\n          className={`file-tree-entry ${item.type}`}\n          onClick={() => item.type === 'file' ? fetchFileContent(item.path) : null}\n        >\n          {item.type === 'folder' ? '📁' : '📄'} {item.name}\n        </div>\n        {item.type === 'folder' && item.contents && (\n          <div className=\"file-tree-contents\">\n            {renderFileTree(item.contents)}\n          </div>\n        )}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"file-browser-container\">\n      <button className=\"toggle-sidebar\" onClick={toggleSidebar}>\n        {isSidebarVisible ? 'Hide Sidebar' : 'Show Sidebar'}\n      </button>\n      {isSidebarVisible && (\n        <div className=\"file-tree-sidebar\" style={{ width: sidebarWidth }}>\n          <h3>File Browser</h3>\n          {renderFileTree(fileTree)}\n        </div>\n      )}\n      <div className=\"file-content\">\n        {selectedFile ? (\n          <div>\n            <h3>Viewing: {selectedFile}</h3>\n            {renderFileContent()}\n          </div>\n        ) : (\n          <p>Select a file to view its content</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default GoogleDriveNotes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}