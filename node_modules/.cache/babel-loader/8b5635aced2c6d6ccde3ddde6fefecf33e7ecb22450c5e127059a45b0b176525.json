{"ast":null,"code":"import { SMITHY_CONTEXT_KEY } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nfunction convertHttpAuthSchemesToMap(httpAuthSchemes) {\n  const map = new Map();\n  for (const scheme of httpAuthSchemes) {\n    map.set(scheme.schemeId, scheme);\n  }\n  return map;\n}\nexport const httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async args => {\n  const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));\n  const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);\n  const smithyContext = getSmithyContext(context);\n  const failureReasons = [];\n  for (const option of options) {\n    const scheme = authSchemes.get(option.schemeId);\n    if (!scheme) {\n      failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` was not enabled for this service.`);\n      continue;\n    }\n    const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));\n    if (!identityProvider) {\n      failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` did not have an IdentityProvider configured.`);\n      continue;\n    }\n    const {\n      identityProperties = {},\n      signingProperties = {}\n    } = option.propertiesExtractor?.(config, context) || {};\n    option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);\n    option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);\n    smithyContext.selectedHttpAuthScheme = {\n      httpAuthOption: option,\n      identity: await identityProvider(option.identityProperties),\n      signer: scheme.signer\n    };\n    break;\n  }\n  if (!smithyContext.selectedHttpAuthScheme) {\n    throw new Error(failureReasons.join(\"\\n\"));\n  }\n  return next(args);\n};","map":{"version":3,"names":["SMITHY_CONTEXT_KEY","getSmithyContext","convertHttpAuthSchemesToMap","httpAuthSchemes","map","Map","scheme","set","schemeId","httpAuthSchemeMiddleware","config","mwOptions","next","context","args","options","httpAuthSchemeProvider","httpAuthSchemeParametersProvider","input","authSchemes","smithyContext","failureReasons","option","get","push","identityProvider","identityProviderConfigProvider","identityProperties","signingProperties","propertiesExtractor","Object","assign","selectedHttpAuthScheme","httpAuthOption","identity","signer","Error","join"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"],"sourcesContent":["import { SMITHY_CONTEXT_KEY, } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nfunction convertHttpAuthSchemesToMap(httpAuthSchemes) {\n    const map = new Map();\n    for (const scheme of httpAuthSchemes) {\n        map.set(scheme.schemeId, scheme);\n    }\n    return map;\n}\nexport const httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {\n    const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));\n    const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);\n    const smithyContext = getSmithyContext(context);\n    const failureReasons = [];\n    for (const option of options) {\n        const scheme = authSchemes.get(option.schemeId);\n        if (!scheme) {\n            failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` was not enabled for this service.`);\n            continue;\n        }\n        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));\n        if (!identityProvider) {\n            failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` did not have an IdentityProvider configured.`);\n            continue;\n        }\n        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};\n        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);\n        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);\n        smithyContext.selectedHttpAuthScheme = {\n            httpAuthOption: option,\n            identity: await identityProvider(option.identityProperties),\n            signer: scheme.signer,\n        };\n        break;\n    }\n    if (!smithyContext.selectedHttpAuthScheme) {\n        throw new Error(failureReasons.join(\"\\n\"));\n    }\n    return next(args);\n};\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAS,eAAe;AACnD,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,2BAA2BA,CAACC,eAAe,EAAE;EAClD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,KAAK,MAAMC,MAAM,IAAIH,eAAe,EAAE;IAClCC,GAAG,CAACG,GAAG,CAACD,MAAM,CAACE,QAAQ,EAAEF,MAAM,CAAC;EACpC;EACA,OAAOF,GAAG;AACd;AACA,OAAO,MAAMK,wBAAwB,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EAC9F,MAAMC,OAAO,GAAGL,MAAM,CAACM,sBAAsB,CAAC,MAAML,SAAS,CAACM,gCAAgC,CAACP,MAAM,EAAEG,OAAO,EAAEC,IAAI,CAACI,KAAK,CAAC,CAAC;EAC5H,MAAMC,WAAW,GAAGjB,2BAA2B,CAACQ,MAAM,CAACP,eAAe,CAAC;EACvE,MAAMiB,aAAa,GAAGnB,gBAAgB,CAACY,OAAO,CAAC;EAC/C,MAAMQ,cAAc,GAAG,EAAE;EACzB,KAAK,MAAMC,MAAM,IAAIP,OAAO,EAAE;IAC1B,MAAMT,MAAM,GAAGa,WAAW,CAACI,GAAG,CAACD,MAAM,CAACd,QAAQ,CAAC;IAC/C,IAAI,CAACF,MAAM,EAAE;MACTe,cAAc,CAACG,IAAI,CAAC,oBAAoBF,MAAM,CAACd,QAAQ,sCAAsC,CAAC;MAC9F;IACJ;IACA,MAAMiB,gBAAgB,GAAGnB,MAAM,CAACmB,gBAAgB,CAAC,MAAMd,SAAS,CAACe,8BAA8B,CAAChB,MAAM,CAAC,CAAC;IACxG,IAAI,CAACe,gBAAgB,EAAE;MACnBJ,cAAc,CAACG,IAAI,CAAC,oBAAoBF,MAAM,CAACd,QAAQ,iDAAiD,CAAC;MACzG;IACJ;IACA,MAAM;MAAEmB,kBAAkB,GAAG,CAAC,CAAC;MAAEC,iBAAiB,GAAG,CAAC;IAAE,CAAC,GAAGN,MAAM,CAACO,mBAAmB,GAAGnB,MAAM,EAAEG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/GS,MAAM,CAACK,kBAAkB,GAAGG,MAAM,CAACC,MAAM,CAACT,MAAM,CAACK,kBAAkB,IAAI,CAAC,CAAC,EAAEA,kBAAkB,CAAC;IAC9FL,MAAM,CAACM,iBAAiB,GAAGE,MAAM,CAACC,MAAM,CAACT,MAAM,CAACM,iBAAiB,IAAI,CAAC,CAAC,EAAEA,iBAAiB,CAAC;IAC3FR,aAAa,CAACY,sBAAsB,GAAG;MACnCC,cAAc,EAAEX,MAAM;MACtBY,QAAQ,EAAE,MAAMT,gBAAgB,CAACH,MAAM,CAACK,kBAAkB,CAAC;MAC3DQ,MAAM,EAAE7B,MAAM,CAAC6B;IACnB,CAAC;IACD;EACJ;EACA,IAAI,CAACf,aAAa,CAACY,sBAAsB,EAAE;IACvC,MAAM,IAAII,KAAK,CAACf,cAAc,CAACgB,IAAI,CAAC,IAAI,CAAC,CAAC;EAC9C;EACA,OAAOzB,IAAI,CAACE,IAAI,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}