{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { isChecksumWithPartNumber } from \"./isChecksumWithPartNumber\";\nimport { isStreaming } from \"./isStreaming\";\nimport { createReadStreamOnBuffer } from \"./streams/create-read-stream-on-buffer\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport const flexibleChecksumsResponseMiddlewareOptions = {\n  name: \"flexibleChecksumsResponseMiddleware\",\n  toMiddleware: \"deserializerMiddleware\",\n  relation: \"after\",\n  tags: [\"BODY_CHECKSUM\"],\n  override: true\n};\nexport const flexibleChecksumsResponseMiddleware = (config, middlewareConfig) => (next, context) => async args => {\n  if (!HttpRequest.isInstance(args.request)) {\n    return next(args);\n  }\n  const input = args.input;\n  const result = await next(args);\n  const response = result.response;\n  let collectedStream = undefined;\n  const {\n    requestValidationModeMember,\n    responseAlgorithms\n  } = middlewareConfig;\n  if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n    const {\n      clientName,\n      commandName\n    } = context;\n    const isS3WholeObjectMultipartGetResponseChecksum = clientName === \"S3Client\" && commandName === \"GetObjectCommand\" && getChecksumAlgorithmListForResponse(responseAlgorithms).every(algorithm => {\n      const responseHeader = getChecksumLocationName(algorithm);\n      const checksumFromResponse = response.headers[responseHeader];\n      return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);\n    });\n    if (isS3WholeObjectMultipartGetResponseChecksum) {\n      return result;\n    }\n    const isStreamingBody = isStreaming(response.body);\n    if (isStreamingBody) {\n      collectedStream = await config.streamCollector(response.body);\n      response.body = createReadStreamOnBuffer(collectedStream);\n    }\n    await validateChecksumFromResponse(result.response, {\n      config,\n      responseAlgorithms\n    });\n    if (isStreamingBody && collectedStream) {\n      response.body = createReadStreamOnBuffer(collectedStream);\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["HttpRequest","getChecksumAlgorithmListForResponse","getChecksumLocationName","isChecksumWithPartNumber","isStreaming","createReadStreamOnBuffer","validateChecksumFromResponse","flexibleChecksumsResponseMiddlewareOptions","name","toMiddleware","relation","tags","override","flexibleChecksumsResponseMiddleware","config","middlewareConfig","next","context","args","isInstance","request","input","result","response","collectedStream","undefined","requestValidationModeMember","responseAlgorithms","clientName","commandName","isS3WholeObjectMultipartGetResponseChecksum","every","algorithm","responseHeader","checksumFromResponse","headers","isStreamingBody","body","streamCollector"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsResponseMiddleware.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { isChecksumWithPartNumber } from \"./isChecksumWithPartNumber\";\nimport { isStreaming } from \"./isStreaming\";\nimport { createReadStreamOnBuffer } from \"./streams/create-read-stream-on-buffer\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport const flexibleChecksumsResponseMiddlewareOptions = {\n    name: \"flexibleChecksumsResponseMiddleware\",\n    toMiddleware: \"deserializerMiddleware\",\n    relation: \"after\",\n    tags: [\"BODY_CHECKSUM\"],\n    override: true,\n};\nexport const flexibleChecksumsResponseMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {\n    if (!HttpRequest.isInstance(args.request)) {\n        return next(args);\n    }\n    const input = args.input;\n    const result = await next(args);\n    const response = result.response;\n    let collectedStream = undefined;\n    const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;\n    if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n        const { clientName, commandName } = context;\n        const isS3WholeObjectMultipartGetResponseChecksum = clientName === \"S3Client\" &&\n            commandName === \"GetObjectCommand\" &&\n            getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {\n                const responseHeader = getChecksumLocationName(algorithm);\n                const checksumFromResponse = response.headers[responseHeader];\n                return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);\n            });\n        if (isS3WholeObjectMultipartGetResponseChecksum) {\n            return result;\n        }\n        const isStreamingBody = isStreaming(response.body);\n        if (isStreamingBody) {\n            collectedStream = await config.streamCollector(response.body);\n            response.body = createReadStreamOnBuffer(collectedStream);\n        }\n        await validateChecksumFromResponse(result.response, {\n            config,\n            responseAlgorithms,\n        });\n        if (isStreamingBody && collectedStream) {\n            response.body = createReadStreamOnBuffer(collectedStream);\n        }\n    }\n    return result;\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,wBAAwB,QAAQ,wCAAwC;AACjF,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,OAAO,MAAMC,0CAA0C,GAAG;EACtDC,IAAI,EAAE,qCAAqC;EAC3CC,YAAY,EAAE,wBAAwB;EACtCC,QAAQ,EAAE,OAAO;EACjBC,IAAI,EAAE,CAAC,eAAe,CAAC;EACvBC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,MAAMC,mCAAmC,GAAGA,CAACC,MAAM,EAAEC,gBAAgB,KAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EAChH,IAAI,CAAClB,WAAW,CAACmB,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC,EAAE;IACvC,OAAOJ,IAAI,CAACE,IAAI,CAAC;EACrB;EACA,MAAMG,KAAK,GAAGH,IAAI,CAACG,KAAK;EACxB,MAAMC,MAAM,GAAG,MAAMN,IAAI,CAACE,IAAI,CAAC;EAC/B,MAAMK,QAAQ,GAAGD,MAAM,CAACC,QAAQ;EAChC,IAAIC,eAAe,GAAGC,SAAS;EAC/B,MAAM;IAAEC,2BAA2B;IAAEC;EAAmB,CAAC,GAAGZ,gBAAgB;EAC5E,IAAIW,2BAA2B,IAAIL,KAAK,CAACK,2BAA2B,CAAC,KAAK,SAAS,EAAE;IACjF,MAAM;MAAEE,UAAU;MAAEC;IAAY,CAAC,GAAGZ,OAAO;IAC3C,MAAMa,2CAA2C,GAAGF,UAAU,KAAK,UAAU,IACzEC,WAAW,KAAK,kBAAkB,IAClC5B,mCAAmC,CAAC0B,kBAAkB,CAAC,CAACI,KAAK,CAAEC,SAAS,IAAK;MACzE,MAAMC,cAAc,GAAG/B,uBAAuB,CAAC8B,SAAS,CAAC;MACzD,MAAME,oBAAoB,GAAGX,QAAQ,CAACY,OAAO,CAACF,cAAc,CAAC;MAC7D,OAAO,CAACC,oBAAoB,IAAI/B,wBAAwB,CAAC+B,oBAAoB,CAAC;IAClF,CAAC,CAAC;IACN,IAAIJ,2CAA2C,EAAE;MAC7C,OAAOR,MAAM;IACjB;IACA,MAAMc,eAAe,GAAGhC,WAAW,CAACmB,QAAQ,CAACc,IAAI,CAAC;IAClD,IAAID,eAAe,EAAE;MACjBZ,eAAe,GAAG,MAAMV,MAAM,CAACwB,eAAe,CAACf,QAAQ,CAACc,IAAI,CAAC;MAC7Dd,QAAQ,CAACc,IAAI,GAAGhC,wBAAwB,CAACmB,eAAe,CAAC;IAC7D;IACA,MAAMlB,4BAA4B,CAACgB,MAAM,CAACC,QAAQ,EAAE;MAChDT,MAAM;MACNa;IACJ,CAAC,CAAC;IACF,IAAIS,eAAe,IAAIZ,eAAe,EAAE;MACpCD,QAAQ,CAACc,IAAI,GAAGhC,wBAAwB,CAACmB,eAAe,CAAC;IAC7D;EACJ;EACA,OAAOF,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}