{"ast":null,"code":"import { resolveAwsSdkSigV4AConfig, resolveAwsSdkSigV4Config } from \"@aws-sdk/core\";\nimport { signatureV4CrtContainer } from \"@aws-sdk/signature-v4-multi-region\";\nimport { resolveParams } from \"@smithy/middleware-endpoint\";\nimport { getSmithyContext, normalizeProvider } from \"@smithy/util-middleware\";\nimport { defaultEndpointResolver } from \"../endpoint/endpointResolver\";\nconst createEndpointRuleSetHttpAuthSchemeParametersProvider = defaultHttpAuthSchemeParametersProvider => async (config, context, input) => {\n  if (!input) {\n    throw new Error(`Could not find \\`input\\` for \\`defaultEndpointRuleSetHttpAuthSchemeParametersProvider\\``);\n  }\n  const defaultParameters = await defaultHttpAuthSchemeParametersProvider(config, context, input);\n  const instructionsFn = getSmithyContext(context)?.commandInstance?.constructor?.getEndpointParameterInstructions;\n  if (!instructionsFn) {\n    throw new Error(`getEndpointParameterInstructions() is not defined on \\`${context.commandName}\\``);\n  }\n  const endpointParameters = await resolveParams(input, {\n    getEndpointParameterInstructions: instructionsFn\n  }, config);\n  return Object.assign(defaultParameters, endpointParameters);\n};\nconst _defaultS3HttpAuthSchemeParametersProvider = async (config, context, input) => {\n  return {\n    operation: getSmithyContext(context).operation,\n    region: (await normalizeProvider(config.region)()) || (() => {\n      throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n    })()\n  };\n};\nexport const defaultS3HttpAuthSchemeParametersProvider = createEndpointRuleSetHttpAuthSchemeParametersProvider(_defaultS3HttpAuthSchemeParametersProvider);\nfunction createAwsAuthSigv4HttpAuthOption(authParameters) {\n  return {\n    schemeId: \"aws.auth#sigv4\",\n    signingProperties: {\n      name: \"s3\",\n      region: authParameters.region\n    },\n    propertiesExtractor: (config, context) => ({\n      signingProperties: {\n        config,\n        context\n      }\n    })\n  };\n}\nfunction createAwsAuthSigv4aHttpAuthOption(authParameters) {\n  return {\n    schemeId: \"aws.auth#sigv4a\",\n    signingProperties: {\n      name: \"s3\",\n      region: authParameters.region\n    },\n    propertiesExtractor: (config, context) => ({\n      signingProperties: {\n        config,\n        context\n      }\n    })\n  };\n}\nconst createEndpointRuleSetHttpAuthSchemeProvider = (defaultEndpointResolver, defaultHttpAuthSchemeResolver, createHttpAuthOptionFunctions) => {\n  const endpointRuleSetHttpAuthSchemeProvider = authParameters => {\n    const endpoint = defaultEndpointResolver(authParameters);\n    const authSchemes = endpoint.properties?.authSchemes;\n    if (!authSchemes) {\n      return defaultHttpAuthSchemeResolver(authParameters);\n    }\n    const options = [];\n    for (const scheme of authSchemes) {\n      const {\n        name: resolvedName,\n        properties = {},\n        ...rest\n      } = scheme;\n      const name = resolvedName.toLowerCase();\n      if (resolvedName !== name) {\n        console.warn(`HttpAuthScheme has been normalized with lowercasing: \\`${resolvedName}\\` to \\`${name}\\``);\n      }\n      let schemeId;\n      if (name === \"sigv4a\") {\n        schemeId = \"aws.auth#sigv4a\";\n        const sigv4Present = authSchemes.find(s => {\n          const name = s.name.toLowerCase();\n          return name !== \"sigv4a\" && name.startsWith(\"sigv4\");\n        });\n        if (!signatureV4CrtContainer.CrtSignerV4 && sigv4Present) {\n          continue;\n        }\n      } else if (name.startsWith(\"sigv4\")) {\n        schemeId = \"aws.auth#sigv4\";\n      } else {\n        throw new Error(`Unknown HttpAuthScheme found in \\`@smithy.rules#endpointRuleSet\\`: \\`${name}\\``);\n      }\n      const createOption = createHttpAuthOptionFunctions[schemeId];\n      if (!createOption) {\n        throw new Error(`Could not find HttpAuthOption create function for \\`${schemeId}\\``);\n      }\n      const option = createOption(authParameters);\n      option.schemeId = schemeId;\n      option.signingProperties = {\n        ...(option.signingProperties || {}),\n        ...rest,\n        ...properties\n      };\n      options.push(option);\n    }\n    return options;\n  };\n  return endpointRuleSetHttpAuthSchemeProvider;\n};\nconst _defaultS3HttpAuthSchemeProvider = authParameters => {\n  const options = [];\n  switch (authParameters.operation) {\n    default:\n      {\n        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n        options.push(createAwsAuthSigv4aHttpAuthOption(authParameters));\n      }\n  }\n  return options;\n};\nexport const defaultS3HttpAuthSchemeProvider = createEndpointRuleSetHttpAuthSchemeProvider(defaultEndpointResolver, _defaultS3HttpAuthSchemeProvider, {\n  \"aws.auth#sigv4\": createAwsAuthSigv4HttpAuthOption,\n  \"aws.auth#sigv4a\": createAwsAuthSigv4aHttpAuthOption\n});\nexport const resolveHttpAuthSchemeConfig = config => {\n  const config_0 = resolveAwsSdkSigV4Config(config);\n  const config_1 = resolveAwsSdkSigV4AConfig(config_0);\n  return {\n    ...config_1\n  };\n};","map":{"version":3,"names":["resolveAwsSdkSigV4AConfig","resolveAwsSdkSigV4Config","signatureV4CrtContainer","resolveParams","getSmithyContext","normalizeProvider","defaultEndpointResolver","createEndpointRuleSetHttpAuthSchemeParametersProvider","defaultHttpAuthSchemeParametersProvider","config","context","input","Error","defaultParameters","instructionsFn","commandInstance","constructor","getEndpointParameterInstructions","commandName","endpointParameters","Object","assign","_defaultS3HttpAuthSchemeParametersProvider","operation","region","defaultS3HttpAuthSchemeParametersProvider","createAwsAuthSigv4HttpAuthOption","authParameters","schemeId","signingProperties","name","propertiesExtractor","createAwsAuthSigv4aHttpAuthOption","createEndpointRuleSetHttpAuthSchemeProvider","defaultHttpAuthSchemeResolver","createHttpAuthOptionFunctions","endpointRuleSetHttpAuthSchemeProvider","endpoint","authSchemes","properties","options","scheme","resolvedName","rest","toLowerCase","console","warn","sigv4Present","find","s","startsWith","CrtSignerV4","createOption","option","push","_defaultS3HttpAuthSchemeProvider","defaultS3HttpAuthSchemeProvider","resolveHttpAuthSchemeConfig","config_0","config_1"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/client-s3/dist-es/auth/httpAuthSchemeProvider.js"],"sourcesContent":["import { resolveAwsSdkSigV4AConfig, resolveAwsSdkSigV4Config, } from \"@aws-sdk/core\";\nimport { signatureV4CrtContainer } from \"@aws-sdk/signature-v4-multi-region\";\nimport { resolveParams } from \"@smithy/middleware-endpoint\";\nimport { getSmithyContext, normalizeProvider } from \"@smithy/util-middleware\";\nimport { defaultEndpointResolver } from \"../endpoint/endpointResolver\";\nconst createEndpointRuleSetHttpAuthSchemeParametersProvider = (defaultHttpAuthSchemeParametersProvider) => async (config, context, input) => {\n    if (!input) {\n        throw new Error(`Could not find \\`input\\` for \\`defaultEndpointRuleSetHttpAuthSchemeParametersProvider\\``);\n    }\n    const defaultParameters = await defaultHttpAuthSchemeParametersProvider(config, context, input);\n    const instructionsFn = getSmithyContext(context)?.commandInstance?.constructor\n        ?.getEndpointParameterInstructions;\n    if (!instructionsFn) {\n        throw new Error(`getEndpointParameterInstructions() is not defined on \\`${context.commandName}\\``);\n    }\n    const endpointParameters = await resolveParams(input, { getEndpointParameterInstructions: instructionsFn }, config);\n    return Object.assign(defaultParameters, endpointParameters);\n};\nconst _defaultS3HttpAuthSchemeParametersProvider = async (config, context, input) => {\n    return {\n        operation: getSmithyContext(context).operation,\n        region: (await normalizeProvider(config.region)()) ||\n            (() => {\n                throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n            })(),\n    };\n};\nexport const defaultS3HttpAuthSchemeParametersProvider = createEndpointRuleSetHttpAuthSchemeParametersProvider(_defaultS3HttpAuthSchemeParametersProvider);\nfunction createAwsAuthSigv4HttpAuthOption(authParameters) {\n    return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n            name: \"s3\",\n            region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n            signingProperties: {\n                config,\n                context,\n            },\n        }),\n    };\n}\nfunction createAwsAuthSigv4aHttpAuthOption(authParameters) {\n    return {\n        schemeId: \"aws.auth#sigv4a\",\n        signingProperties: {\n            name: \"s3\",\n            region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n            signingProperties: {\n                config,\n                context,\n            },\n        }),\n    };\n}\nconst createEndpointRuleSetHttpAuthSchemeProvider = (defaultEndpointResolver, defaultHttpAuthSchemeResolver, createHttpAuthOptionFunctions) => {\n    const endpointRuleSetHttpAuthSchemeProvider = (authParameters) => {\n        const endpoint = defaultEndpointResolver(authParameters);\n        const authSchemes = endpoint.properties?.authSchemes;\n        if (!authSchemes) {\n            return defaultHttpAuthSchemeResolver(authParameters);\n        }\n        const options = [];\n        for (const scheme of authSchemes) {\n            const { name: resolvedName, properties = {}, ...rest } = scheme;\n            const name = resolvedName.toLowerCase();\n            if (resolvedName !== name) {\n                console.warn(`HttpAuthScheme has been normalized with lowercasing: \\`${resolvedName}\\` to \\`${name}\\``);\n            }\n            let schemeId;\n            if (name === \"sigv4a\") {\n                schemeId = \"aws.auth#sigv4a\";\n                const sigv4Present = authSchemes.find((s) => {\n                    const name = s.name.toLowerCase();\n                    return name !== \"sigv4a\" && name.startsWith(\"sigv4\");\n                });\n                if (!signatureV4CrtContainer.CrtSignerV4 && sigv4Present) {\n                    continue;\n                }\n            }\n            else if (name.startsWith(\"sigv4\")) {\n                schemeId = \"aws.auth#sigv4\";\n            }\n            else {\n                throw new Error(`Unknown HttpAuthScheme found in \\`@smithy.rules#endpointRuleSet\\`: \\`${name}\\``);\n            }\n            const createOption = createHttpAuthOptionFunctions[schemeId];\n            if (!createOption) {\n                throw new Error(`Could not find HttpAuthOption create function for \\`${schemeId}\\``);\n            }\n            const option = createOption(authParameters);\n            option.schemeId = schemeId;\n            option.signingProperties = { ...(option.signingProperties || {}), ...rest, ...properties };\n            options.push(option);\n        }\n        return options;\n    };\n    return endpointRuleSetHttpAuthSchemeProvider;\n};\nconst _defaultS3HttpAuthSchemeProvider = (authParameters) => {\n    const options = [];\n    switch (authParameters.operation) {\n        default: {\n            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n            options.push(createAwsAuthSigv4aHttpAuthOption(authParameters));\n        }\n    }\n    return options;\n};\nexport const defaultS3HttpAuthSchemeProvider = createEndpointRuleSetHttpAuthSchemeProvider(defaultEndpointResolver, _defaultS3HttpAuthSchemeProvider, {\n    \"aws.auth#sigv4\": createAwsAuthSigv4HttpAuthOption,\n    \"aws.auth#sigv4a\": createAwsAuthSigv4aHttpAuthOption,\n});\nexport const resolveHttpAuthSchemeConfig = (config) => {\n    const config_0 = resolveAwsSdkSigV4Config(config);\n    const config_1 = resolveAwsSdkSigV4AConfig(config_0);\n    return {\n        ...config_1,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}