{"ast":null,"code":"import { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { waiterServiceDefaults, WaiterState } from \"./waiter\";\nconst abortTimeout = async abortSignal => {\n  return new Promise(resolve => {\n    const onAbort = () => resolve({\n      state: WaiterState.ABORTED\n    });\n    if (typeof abortSignal.addEventListener === \"function\") {\n      abortSignal.addEventListener(\"abort\", onAbort);\n    } else {\n      abortSignal.onabort = onAbort;\n    }\n  });\n};\nexport const createWaiter = async (options, input, acceptorChecks) => {\n  const params = {\n    ...waiterServiceDefaults,\n    ...options\n  };\n  validateWaiterOptions(params);\n  const exitConditions = [runPolling(params, input, acceptorChecks)];\n  if (options.abortController) {\n    exitConditions.push(abortTimeout(options.abortController.signal));\n  }\n  if (options.abortSignal) {\n    exitConditions.push(abortTimeout(options.abortSignal));\n  }\n  return Promise.race(exitConditions);\n};","map":{"version":3,"names":["runPolling","validateWaiterOptions","waiterServiceDefaults","WaiterState","abortTimeout","abortSignal","Promise","resolve","onAbort","state","ABORTED","addEventListener","onabort","createWaiter","options","input","acceptorChecks","params","exitConditions","abortController","push","signal","race"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@smithy/util-waiter/dist-es/createWaiter.js"],"sourcesContent":["import { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { waiterServiceDefaults, WaiterState } from \"./waiter\";\nconst abortTimeout = async (abortSignal) => {\n    return new Promise((resolve) => {\n        const onAbort = () => resolve({ state: WaiterState.ABORTED });\n        if (typeof abortSignal.addEventListener === \"function\") {\n            abortSignal.addEventListener(\"abort\", onAbort);\n        }\n        else {\n            abortSignal.onabort = onAbort;\n        }\n    });\n};\nexport const createWaiter = async (options, input, acceptorChecks) => {\n    const params = {\n        ...waiterServiceDefaults,\n        ...options,\n    };\n    validateWaiterOptions(params);\n    const exitConditions = [runPolling(params, input, acceptorChecks)];\n    if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n    }\n    if (options.abortSignal) {\n        exitConditions.push(abortTimeout(options.abortSignal));\n    }\n    return Promise.race(exitConditions);\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,UAAU;AACrC,SAASC,qBAAqB,QAAQ,SAAS;AAC/C,SAASC,qBAAqB,EAAEC,WAAW,QAAQ,UAAU;AAC7D,MAAMC,YAAY,GAAG,MAAOC,WAAW,IAAK;EACxC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC5B,MAAMC,OAAO,GAAGA,CAAA,KAAMD,OAAO,CAAC;MAAEE,KAAK,EAAEN,WAAW,CAACO;IAAQ,CAAC,CAAC;IAC7D,IAAI,OAAOL,WAAW,CAACM,gBAAgB,KAAK,UAAU,EAAE;MACpDN,WAAW,CAACM,gBAAgB,CAAC,OAAO,EAAEH,OAAO,CAAC;IAClD,CAAC,MACI;MACDH,WAAW,CAACO,OAAO,GAAGJ,OAAO;IACjC;EACJ,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAOC,OAAO,EAAEC,KAAK,EAAEC,cAAc,KAAK;EAClE,MAAMC,MAAM,GAAG;IACX,GAAGf,qBAAqB;IACxB,GAAGY;EACP,CAAC;EACDb,qBAAqB,CAACgB,MAAM,CAAC;EAC7B,MAAMC,cAAc,GAAG,CAAClB,UAAU,CAACiB,MAAM,EAAEF,KAAK,EAAEC,cAAc,CAAC,CAAC;EAClE,IAAIF,OAAO,CAACK,eAAe,EAAE;IACzBD,cAAc,CAACE,IAAI,CAAChB,YAAY,CAACU,OAAO,CAACK,eAAe,CAACE,MAAM,CAAC,CAAC;EACrE;EACA,IAAIP,OAAO,CAACT,WAAW,EAAE;IACrBa,cAAc,CAACE,IAAI,CAAChB,YAAY,CAACU,OAAO,CAACT,WAAW,CAAC,CAAC;EAC1D;EACA,OAAOC,OAAO,CAACgB,IAAI,CAACJ,cAAc,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}