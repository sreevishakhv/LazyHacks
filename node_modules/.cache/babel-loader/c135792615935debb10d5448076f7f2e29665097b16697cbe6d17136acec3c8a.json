{"ast":null,"code":"export const getHttpAuthExtensionConfiguration = runtimeConfig => {\n  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n  let _credentials = runtimeConfig.credentials;\n  return {\n    setHttpAuthScheme(httpAuthScheme) {\n      const index = _httpAuthSchemes.findIndex(scheme => scheme.schemeId === httpAuthScheme.schemeId);\n      if (index === -1) {\n        _httpAuthSchemes.push(httpAuthScheme);\n      } else {\n        _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n      }\n    },\n    httpAuthSchemes() {\n      return _httpAuthSchemes;\n    },\n    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n      _httpAuthSchemeProvider = httpAuthSchemeProvider;\n    },\n    httpAuthSchemeProvider() {\n      return _httpAuthSchemeProvider;\n    },\n    setCredentials(credentials) {\n      _credentials = credentials;\n    },\n    credentials() {\n      return _credentials;\n    }\n  };\n};\nexport const resolveHttpAuthRuntimeConfig = config => {\n  return {\n    httpAuthSchemes: config.httpAuthSchemes(),\n    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n    credentials: config.credentials()\n  };\n};","map":{"version":3,"names":["getHttpAuthExtensionConfiguration","runtimeConfig","_httpAuthSchemes","httpAuthSchemes","_httpAuthSchemeProvider","httpAuthSchemeProvider","_credentials","credentials","setHttpAuthScheme","httpAuthScheme","index","findIndex","scheme","schemeId","push","splice","setHttpAuthSchemeProvider","setCredentials","resolveHttpAuthRuntimeConfig","config"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/client-s3/dist-es/auth/httpAuthExtensionConfiguration.js"],"sourcesContent":["export const getHttpAuthExtensionConfiguration = (runtimeConfig) => {\n    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n    let _credentials = runtimeConfig.credentials;\n    return {\n        setHttpAuthScheme(httpAuthScheme) {\n            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);\n            if (index === -1) {\n                _httpAuthSchemes.push(httpAuthScheme);\n            }\n            else {\n                _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n            }\n        },\n        httpAuthSchemes() {\n            return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n            _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n            return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n            _credentials = credentials;\n        },\n        credentials() {\n            return _credentials;\n        },\n    };\n};\nexport const resolveHttpAuthRuntimeConfig = (config) => {\n    return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n    };\n};\n"],"mappings":"AAAA,OAAO,MAAMA,iCAAiC,GAAIC,aAAa,IAAK;EAChE,MAAMC,gBAAgB,GAAGD,aAAa,CAACE,eAAe;EACtD,IAAIC,uBAAuB,GAAGH,aAAa,CAACI,sBAAsB;EAClE,IAAIC,YAAY,GAAGL,aAAa,CAACM,WAAW;EAC5C,OAAO;IACHC,iBAAiBA,CAACC,cAAc,EAAE;MAC9B,MAAMC,KAAK,GAAGR,gBAAgB,CAACS,SAAS,CAAEC,MAAM,IAAKA,MAAM,CAACC,QAAQ,KAAKJ,cAAc,CAACI,QAAQ,CAAC;MACjG,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QACdR,gBAAgB,CAACY,IAAI,CAACL,cAAc,CAAC;MACzC,CAAC,MACI;QACDP,gBAAgB,CAACa,MAAM,CAACL,KAAK,EAAE,CAAC,EAAED,cAAc,CAAC;MACrD;IACJ,CAAC;IACDN,eAAeA,CAAA,EAAG;MACd,OAAOD,gBAAgB;IAC3B,CAAC;IACDc,yBAAyBA,CAACX,sBAAsB,EAAE;MAC9CD,uBAAuB,GAAGC,sBAAsB;IACpD,CAAC;IACDA,sBAAsBA,CAAA,EAAG;MACrB,OAAOD,uBAAuB;IAClC,CAAC;IACDa,cAAcA,CAACV,WAAW,EAAE;MACxBD,YAAY,GAAGC,WAAW;IAC9B,CAAC;IACDA,WAAWA,CAAA,EAAG;MACV,OAAOD,YAAY;IACvB;EACJ,CAAC;AACL,CAAC;AACD,OAAO,MAAMY,4BAA4B,GAAIC,MAAM,IAAK;EACpD,OAAO;IACHhB,eAAe,EAAEgB,MAAM,CAAChB,eAAe,CAAC,CAAC;IACzCE,sBAAsB,EAAEc,MAAM,CAACd,sBAAsB,CAAC,CAAC;IACvDE,WAAW,EAAEY,MAAM,CAACZ,WAAW,CAAC;EACpC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}