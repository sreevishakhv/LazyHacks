{"ast":null,"code":"import { toHex } from \"@smithy/util-hex-encoding\";\nimport { normalizeProvider } from \"@smithy/util-middleware\";\nimport { escapeUri } from \"@smithy/util-uri-escape\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { HeaderFormatter } from \"./HeaderFormatter\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n  constructor({\n    applyChecksum,\n    credentials,\n    region,\n    service,\n    sha256,\n    uriEscapePath = true\n  }) {\n    this.headerFormatter = new HeaderFormatter();\n    this.service = service;\n    this.sha256 = sha256;\n    this.uriEscapePath = uriEscapePath;\n    this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n    this.regionProvider = normalizeProvider(region);\n    this.credentialProvider = normalizeProvider(credentials);\n  }\n  async presign(originalRequest, options = {}) {\n    const {\n      signingDate = new Date(),\n      expiresIn = 3600,\n      unsignableHeaders,\n      unhoistableHeaders,\n      signableHeaders,\n      hoistableHeaders,\n      signingRegion,\n      signingService\n    } = options;\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      longDate,\n      shortDate\n    } = formatDate(signingDate);\n    if (expiresIn > MAX_PRESIGNED_TTL) {\n      return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n    }\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const request = moveHeadersToQuery(prepareRequest(originalRequest), {\n      unhoistableHeaders,\n      hoistableHeaders\n    });\n    if (credentials.sessionToken) {\n      request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n    }\n    request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n    request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n    request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n    request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n    request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n    return request;\n  }\n  async sign(toSign, options) {\n    if (typeof toSign === \"string\") {\n      return this.signString(toSign, options);\n    } else if (toSign.headers && toSign.payload) {\n      return this.signEvent(toSign, options);\n    } else if (toSign.message) {\n      return this.signMessage(toSign, options);\n    } else {\n      return this.signRequest(toSign, options);\n    }\n  }\n  async signEvent({\n    headers,\n    payload\n  }, {\n    signingDate = new Date(),\n    priorSignature,\n    signingRegion,\n    signingService\n  }) {\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate,\n      longDate\n    } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const hashedPayload = await getPayloadHash({\n      headers: {},\n      body: payload\n    }, this.sha256);\n    const hash = new this.sha256();\n    hash.update(headers);\n    const hashedHeaders = toHex(await hash.digest());\n    const stringToSign = [EVENT_ALGORITHM_IDENTIFIER, longDate, scope, priorSignature, hashedHeaders, hashedPayload].join(\"\\n\");\n    return this.signString(stringToSign, {\n      signingDate,\n      signingRegion: region,\n      signingService\n    });\n  }\n  async signMessage(signableMessage, {\n    signingDate = new Date(),\n    signingRegion,\n    signingService\n  }) {\n    const promise = this.signEvent({\n      headers: this.headerFormatter.format(signableMessage.message.headers),\n      payload: signableMessage.message.body\n    }, {\n      signingDate,\n      signingRegion,\n      signingService,\n      priorSignature: signableMessage.priorSignature\n    });\n    return promise.then(signature => {\n      return {\n        message: signableMessage.message,\n        signature\n      };\n    });\n  }\n  async signString(stringToSign, {\n    signingDate = new Date(),\n    signingRegion,\n    signingService\n  } = {}) {\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate\n    } = formatDate(signingDate);\n    const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  async signRequest(requestToSign, {\n    signingDate = new Date(),\n    signableHeaders,\n    unsignableHeaders,\n    signingRegion,\n    signingService\n  } = {}) {\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const request = prepareRequest(requestToSign);\n    const {\n      longDate,\n      shortDate\n    } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    request.headers[AMZ_DATE_HEADER] = longDate;\n    if (credentials.sessionToken) {\n      request.headers[TOKEN_HEADER] = credentials.sessionToken;\n    }\n    const payloadHash = await getPayloadHash(request, this.sha256);\n    if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n      request.headers[SHA256_HEADER] = payloadHash;\n    }\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n    request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;\n    return request;\n  }\n  createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n    const sortedHeaders = Object.keys(canonicalHeaders).sort();\n    return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map(name => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n  }\n  async createStringToSign(longDate, credentialScope, canonicalRequest) {\n    const hash = new this.sha256();\n    hash.update(toUint8Array(canonicalRequest));\n    const hashedRequest = await hash.digest();\n    return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n  }\n  getCanonicalPath({\n    path\n  }) {\n    if (this.uriEscapePath) {\n      const normalizedPathSegments = [];\n      for (const pathSegment of path.split(\"/\")) {\n        if (pathSegment?.length === 0) continue;\n        if (pathSegment === \".\") continue;\n        if (pathSegment === \"..\") {\n          normalizedPathSegments.pop();\n        } else {\n          normalizedPathSegments.push(pathSegment);\n        }\n      }\n      const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n      const doubleEncoded = escapeUri(normalizedPath);\n      return doubleEncoded.replace(/%2F/g, \"/\");\n    }\n    return path;\n  }\n  async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n    const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n    const hash = new this.sha256(await keyPromise);\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  getSigningKey(credentials, region, shortDate, service) {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  }\n  validateResolvedCredentials(credentials) {\n    if (typeof credentials !== \"object\" || typeof credentials.accessKeyId !== \"string\" || typeof credentials.secretAccessKey !== \"string\") {\n      throw new Error(\"Resolved credential object is not valid\");\n    }\n  }\n}\nconst formatDate = now => {\n  const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n  return {\n    longDate,\n    shortDate: longDate.slice(0, 8)\n  };\n};\nconst getCanonicalHeaderList = headers => Object.keys(headers).sort().join(\";\");","map":{"version":3,"names":["toHex","normalizeProvider","escapeUri","toUint8Array","ALGORITHM_IDENTIFIER","ALGORITHM_QUERY_PARAM","AMZ_DATE_HEADER","AMZ_DATE_QUERY_PARAM","AUTH_HEADER","CREDENTIAL_QUERY_PARAM","EVENT_ALGORITHM_IDENTIFIER","EXPIRES_QUERY_PARAM","MAX_PRESIGNED_TTL","SHA256_HEADER","SIGNATURE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","TOKEN_HEADER","TOKEN_QUERY_PARAM","createScope","getSigningKey","getCanonicalHeaders","getCanonicalQuery","getPayloadHash","HeaderFormatter","hasHeader","moveHeadersToQuery","prepareRequest","iso8601","SignatureV4","constructor","applyChecksum","credentials","region","service","sha256","uriEscapePath","headerFormatter","regionProvider","credentialProvider","presign","originalRequest","options","signingDate","Date","expiresIn","unsignableHeaders","unhoistableHeaders","signableHeaders","hoistableHeaders","signingRegion","signingService","validateResolvedCredentials","longDate","shortDate","formatDate","Promise","reject","scope","request","sessionToken","query","accessKeyId","toString","canonicalHeaders","getCanonicalHeaderList","getSignature","createCanonicalRequest","sign","toSign","signString","headers","payload","signEvent","message","signMessage","signRequest","priorSignature","hashedPayload","body","hash","update","hashedHeaders","digest","stringToSign","join","signableMessage","promise","format","then","signature","requestToSign","payloadHash","sortedHeaders","Object","keys","sort","method","getCanonicalPath","map","name","createStringToSign","credentialScope","canonicalRequest","hashedRequest","path","normalizedPathSegments","pathSegment","split","length","pop","push","normalizedPath","startsWith","endsWith","doubleEncoded","replace","keyPromise","secretAccessKey","Error","now","slice"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"],"sourcesContent":["import { toHex } from \"@smithy/util-hex-encoding\";\nimport { normalizeProvider } from \"@smithy/util-middleware\";\nimport { escapeUri } from \"@smithy/util-uri-escape\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM, } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { HeaderFormatter } from \"./HeaderFormatter\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        this.headerFormatter = new HeaderFormatter();\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = normalizeProvider(region);\n        this.credentialProvider = normalizeProvider(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else if (toSign.message) {\n            return this.signMessage(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = toHex(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {\n        const promise = this.signEvent({\n            headers: this.headerFormatter.format(signableMessage.message.headers),\n            payload: signableMessage.message.body,\n        }, {\n            signingDate,\n            signingRegion,\n            signingService,\n            priorSignature: signableMessage.priorSignature,\n        });\n        return promise.then((signature) => {\n            return { message: signableMessage.message, signature };\n        });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] =\n            `${ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update(toUint8Array(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")) {\n                if (pathSegment?.length === 0)\n                    continue;\n                if (pathSegment === \".\")\n                    continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                }\n                else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n            const doubleEncoded = escapeUri(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" ||\n            typeof credentials.accessKeyId !== \"string\" ||\n            typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n}\nconst formatDate = (now) => {\n    const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    };\n};\nconst getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\";\");\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,2BAA2B;AACjD,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,oBAAoB,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,WAAW,EAAEC,sBAAsB,EAAEC,0BAA0B,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,0BAA0B,EAAEC,YAAY,EAAEC,iBAAiB,QAAS,aAAa;AAC7T,SAASC,WAAW,EAAEC,aAAa,QAAQ,wBAAwB;AACnE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAO,MAAMC,WAAW,CAAC;EACrBC,WAAWA,CAAC;IAAEC,aAAa;IAAEC,WAAW;IAAEC,MAAM;IAAEC,OAAO;IAAEC,MAAM;IAAEC,aAAa,GAAG;EAAM,CAAC,EAAE;IACxF,IAAI,CAACC,eAAe,GAAG,IAAIb,eAAe,CAAC,CAAC;IAC5C,IAAI,CAACU,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACL,aAAa,GAAG,OAAOA,aAAa,KAAK,SAAS,GAAGA,aAAa,GAAG,IAAI;IAC9E,IAAI,CAACO,cAAc,GAAGpC,iBAAiB,CAAC+B,MAAM,CAAC;IAC/C,IAAI,CAACM,kBAAkB,GAAGrC,iBAAiB,CAAC8B,WAAW,CAAC;EAC5D;EACA,MAAMQ,OAAOA,CAACC,eAAe,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACzC,MAAM;MAAEC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;MAAEC,SAAS,GAAG,IAAI;MAAEC,iBAAiB;MAAEC,kBAAkB;MAAEC,eAAe;MAAEC,gBAAgB;MAAEC,aAAa;MAAEC;IAAgB,CAAC,GAAGT,OAAO;IACxK,MAAMV,WAAW,GAAG,MAAM,IAAI,CAACO,kBAAkB,CAAC,CAAC;IACnD,IAAI,CAACa,2BAA2B,CAACpB,WAAW,CAAC;IAC7C,MAAMC,MAAM,GAAGiB,aAAa,KAAK,MAAM,IAAI,CAACZ,cAAc,CAAC,CAAC,CAAC;IAC7D,MAAM;MAAEe,QAAQ;MAAEC;IAAU,CAAC,GAAGC,UAAU,CAACZ,WAAW,CAAC;IACvD,IAAIE,SAAS,GAAGhC,iBAAiB,EAAE;MAC/B,OAAO2C,OAAO,CAACC,MAAM,CAAC,oCAAoC,GAAG,qDAAqD,GAAG,aAAa,CAAC;IACvI;IACA,MAAMC,KAAK,GAAGvC,WAAW,CAACmC,SAAS,EAAErB,MAAM,EAAEkB,cAAc,IAAI,IAAI,CAACjB,OAAO,CAAC;IAC5E,MAAMyB,OAAO,GAAGjC,kBAAkB,CAACC,cAAc,CAACc,eAAe,CAAC,EAAE;MAAEM,kBAAkB;MAAEE;IAAiB,CAAC,CAAC;IAC7G,IAAIjB,WAAW,CAAC4B,YAAY,EAAE;MAC1BD,OAAO,CAACE,KAAK,CAAC3C,iBAAiB,CAAC,GAAGc,WAAW,CAAC4B,YAAY;IAC/D;IACAD,OAAO,CAACE,KAAK,CAACvD,qBAAqB,CAAC,GAAGD,oBAAoB;IAC3DsD,OAAO,CAACE,KAAK,CAACnD,sBAAsB,CAAC,GAAG,GAAGsB,WAAW,CAAC8B,WAAW,IAAIJ,KAAK,EAAE;IAC7EC,OAAO,CAACE,KAAK,CAACrD,oBAAoB,CAAC,GAAG6C,QAAQ;IAC9CM,OAAO,CAACE,KAAK,CAACjD,mBAAmB,CAAC,GAAGiC,SAAS,CAACkB,QAAQ,CAAC,EAAE,CAAC;IAC3D,MAAMC,gBAAgB,GAAG3C,mBAAmB,CAACsC,OAAO,EAAEb,iBAAiB,EAAEE,eAAe,CAAC;IACzFW,OAAO,CAACE,KAAK,CAAC7C,0BAA0B,CAAC,GAAGiD,sBAAsB,CAACD,gBAAgB,CAAC;IACpFL,OAAO,CAACE,KAAK,CAAC9C,qBAAqB,CAAC,GAAG,MAAM,IAAI,CAACmD,YAAY,CAACb,QAAQ,EAAEK,KAAK,EAAE,IAAI,CAACtC,aAAa,CAACY,WAAW,EAAEC,MAAM,EAAEqB,SAAS,EAAEH,cAAc,CAAC,EAAE,IAAI,CAACgB,sBAAsB,CAACR,OAAO,EAAEK,gBAAgB,EAAE,MAAMzC,cAAc,CAACkB,eAAe,EAAE,IAAI,CAACN,MAAM,CAAC,CAAC,CAAC;IAC/P,OAAOwB,OAAO;EAClB;EACA,MAAMS,IAAIA,CAACC,MAAM,EAAE3B,OAAO,EAAE;IACxB,IAAI,OAAO2B,MAAM,KAAK,QAAQ,EAAE;MAC5B,OAAO,IAAI,CAACC,UAAU,CAACD,MAAM,EAAE3B,OAAO,CAAC;IAC3C,CAAC,MACI,IAAI2B,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACG,OAAO,EAAE;MACvC,OAAO,IAAI,CAACC,SAAS,CAACJ,MAAM,EAAE3B,OAAO,CAAC;IAC1C,CAAC,MACI,IAAI2B,MAAM,CAACK,OAAO,EAAE;MACrB,OAAO,IAAI,CAACC,WAAW,CAACN,MAAM,EAAE3B,OAAO,CAAC;IAC5C,CAAC,MACI;MACD,OAAO,IAAI,CAACkC,WAAW,CAACP,MAAM,EAAE3B,OAAO,CAAC;IAC5C;EACJ;EACA,MAAM+B,SAASA,CAAC;IAAEF,OAAO;IAAEC;EAAQ,CAAC,EAAE;IAAE7B,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAAEiC,cAAc;IAAE3B,aAAa;IAAEC;EAAe,CAAC,EAAE;IAC/G,MAAMlB,MAAM,GAAGiB,aAAa,KAAK,MAAM,IAAI,CAACZ,cAAc,CAAC,CAAC,CAAC;IAC7D,MAAM;MAAEgB,SAAS;MAAED;IAAS,CAAC,GAAGE,UAAU,CAACZ,WAAW,CAAC;IACvD,MAAMe,KAAK,GAAGvC,WAAW,CAACmC,SAAS,EAAErB,MAAM,EAAEkB,cAAc,IAAI,IAAI,CAACjB,OAAO,CAAC;IAC5E,MAAM4C,aAAa,GAAG,MAAMvD,cAAc,CAAC;MAAEgD,OAAO,EAAE,CAAC,CAAC;MAAEQ,IAAI,EAAEP;IAAQ,CAAC,EAAE,IAAI,CAACrC,MAAM,CAAC;IACvF,MAAM6C,IAAI,GAAG,IAAI,IAAI,CAAC7C,MAAM,CAAC,CAAC;IAC9B6C,IAAI,CAACC,MAAM,CAACV,OAAO,CAAC;IACpB,MAAMW,aAAa,GAAGjF,KAAK,CAAC,MAAM+E,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;IAChD,MAAMC,YAAY,GAAG,CACjBzE,0BAA0B,EAC1B0C,QAAQ,EACRK,KAAK,EACLmB,cAAc,EACdK,aAAa,EACbJ,aAAa,CAChB,CAACO,IAAI,CAAC,IAAI,CAAC;IACZ,OAAO,IAAI,CAACf,UAAU,CAACc,YAAY,EAAE;MAAEzC,WAAW;MAAEO,aAAa,EAAEjB,MAAM;MAAEkB;IAAe,CAAC,CAAC;EAChG;EACA,MAAMwB,WAAWA,CAACW,eAAe,EAAE;IAAE3C,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAAEM,aAAa;IAAEC;EAAe,CAAC,EAAE;IAC5F,MAAMoC,OAAO,GAAG,IAAI,CAACd,SAAS,CAAC;MAC3BF,OAAO,EAAE,IAAI,CAAClC,eAAe,CAACmD,MAAM,CAACF,eAAe,CAACZ,OAAO,CAACH,OAAO,CAAC;MACrEC,OAAO,EAAEc,eAAe,CAACZ,OAAO,CAACK;IACrC,CAAC,EAAE;MACCpC,WAAW;MACXO,aAAa;MACbC,cAAc;MACd0B,cAAc,EAAES,eAAe,CAACT;IACpC,CAAC,CAAC;IACF,OAAOU,OAAO,CAACE,IAAI,CAAEC,SAAS,IAAK;MAC/B,OAAO;QAAEhB,OAAO,EAAEY,eAAe,CAACZ,OAAO;QAAEgB;MAAU,CAAC;IAC1D,CAAC,CAAC;EACN;EACA,MAAMpB,UAAUA,CAACc,YAAY,EAAE;IAAEzC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAAEM,aAAa;IAAEC;EAAe,CAAC,GAAG,CAAC,CAAC,EAAE;IAC7F,MAAMnB,WAAW,GAAG,MAAM,IAAI,CAACO,kBAAkB,CAAC,CAAC;IACnD,IAAI,CAACa,2BAA2B,CAACpB,WAAW,CAAC;IAC7C,MAAMC,MAAM,GAAGiB,aAAa,KAAK,MAAM,IAAI,CAACZ,cAAc,CAAC,CAAC,CAAC;IAC7D,MAAM;MAAEgB;IAAU,CAAC,GAAGC,UAAU,CAACZ,WAAW,CAAC;IAC7C,MAAMqC,IAAI,GAAG,IAAI,IAAI,CAAC7C,MAAM,CAAC,MAAM,IAAI,CAACf,aAAa,CAACY,WAAW,EAAEC,MAAM,EAAEqB,SAAS,EAAEH,cAAc,CAAC,CAAC;IACtG6B,IAAI,CAACC,MAAM,CAAC7E,YAAY,CAACgF,YAAY,CAAC,CAAC;IACvC,OAAOnF,KAAK,CAAC,MAAM+E,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;EACrC;EACA,MAAMP,WAAWA,CAACe,aAAa,EAAE;IAAEhD,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAAEI,eAAe;IAAEF,iBAAiB;IAAEI,aAAa;IAAEC;EAAgB,CAAC,GAAG,CAAC,CAAC,EAAE;IACpI,MAAMnB,WAAW,GAAG,MAAM,IAAI,CAACO,kBAAkB,CAAC,CAAC;IACnD,IAAI,CAACa,2BAA2B,CAACpB,WAAW,CAAC;IAC7C,MAAMC,MAAM,GAAGiB,aAAa,KAAK,MAAM,IAAI,CAACZ,cAAc,CAAC,CAAC,CAAC;IAC7D,MAAMqB,OAAO,GAAGhC,cAAc,CAACgE,aAAa,CAAC;IAC7C,MAAM;MAAEtC,QAAQ;MAAEC;IAAU,CAAC,GAAGC,UAAU,CAACZ,WAAW,CAAC;IACvD,MAAMe,KAAK,GAAGvC,WAAW,CAACmC,SAAS,EAAErB,MAAM,EAAEkB,cAAc,IAAI,IAAI,CAACjB,OAAO,CAAC;IAC5EyB,OAAO,CAACY,OAAO,CAAChE,eAAe,CAAC,GAAG8C,QAAQ;IAC3C,IAAIrB,WAAW,CAAC4B,YAAY,EAAE;MAC1BD,OAAO,CAACY,OAAO,CAACtD,YAAY,CAAC,GAAGe,WAAW,CAAC4B,YAAY;IAC5D;IACA,MAAMgC,WAAW,GAAG,MAAMrE,cAAc,CAACoC,OAAO,EAAE,IAAI,CAACxB,MAAM,CAAC;IAC9D,IAAI,CAACV,SAAS,CAACX,aAAa,EAAE6C,OAAO,CAACY,OAAO,CAAC,IAAI,IAAI,CAACxC,aAAa,EAAE;MAClE4B,OAAO,CAACY,OAAO,CAACzD,aAAa,CAAC,GAAG8E,WAAW;IAChD;IACA,MAAM5B,gBAAgB,GAAG3C,mBAAmB,CAACsC,OAAO,EAAEb,iBAAiB,EAAEE,eAAe,CAAC;IACzF,MAAM0C,SAAS,GAAG,MAAM,IAAI,CAACxB,YAAY,CAACb,QAAQ,EAAEK,KAAK,EAAE,IAAI,CAACtC,aAAa,CAACY,WAAW,EAAEC,MAAM,EAAEqB,SAAS,EAAEH,cAAc,CAAC,EAAE,IAAI,CAACgB,sBAAsB,CAACR,OAAO,EAAEK,gBAAgB,EAAE4B,WAAW,CAAC,CAAC;IACnMjC,OAAO,CAACY,OAAO,CAAC9D,WAAW,CAAC,GACxB,GAAGJ,oBAAoB,GAAG,GACtB,cAAc2B,WAAW,CAAC8B,WAAW,IAAIJ,KAAK,IAAI,GAClD,iBAAiBO,sBAAsB,CAACD,gBAAgB,CAAC,IAAI,GAC7D,aAAa0B,SAAS,EAAE;IAChC,OAAO/B,OAAO;EAClB;EACAQ,sBAAsBA,CAACR,OAAO,EAAEK,gBAAgB,EAAE4B,WAAW,EAAE;IAC3D,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAAC/B,gBAAgB,CAAC,CAACgC,IAAI,CAAC,CAAC;IAC1D,OAAO,GAAGrC,OAAO,CAACsC,MAAM;AAChC,EAAE,IAAI,CAACC,gBAAgB,CAACvC,OAAO,CAAC;AAChC,EAAErC,iBAAiB,CAACqC,OAAO,CAAC;AAC5B,EAAEkC,aAAa,CAACM,GAAG,CAAEC,IAAI,IAAK,GAAGA,IAAI,IAAIpC,gBAAgB,CAACoC,IAAI,CAAC,EAAE,CAAC,CAACf,IAAI,CAAC,IAAI,CAAC;AAC7E;AACA,EAAEQ,aAAa,CAACR,IAAI,CAAC,GAAG,CAAC;AACzB,EAAEO,WAAW,EAAE;EACX;EACA,MAAMS,kBAAkBA,CAAChD,QAAQ,EAAEiD,eAAe,EAAEC,gBAAgB,EAAE;IAClE,MAAMvB,IAAI,GAAG,IAAI,IAAI,CAAC7C,MAAM,CAAC,CAAC;IAC9B6C,IAAI,CAACC,MAAM,CAAC7E,YAAY,CAACmG,gBAAgB,CAAC,CAAC;IAC3C,MAAMC,aAAa,GAAG,MAAMxB,IAAI,CAACG,MAAM,CAAC,CAAC;IACzC,OAAO,GAAG9E,oBAAoB;AACtC,EAAEgD,QAAQ;AACV,EAAEiD,eAAe;AACjB,EAAErG,KAAK,CAACuG,aAAa,CAAC,EAAE;EACpB;EACAN,gBAAgBA,CAAC;IAAEO;EAAK,CAAC,EAAE;IACvB,IAAI,IAAI,CAACrE,aAAa,EAAE;MACpB,MAAMsE,sBAAsB,GAAG,EAAE;MACjC,KAAK,MAAMC,WAAW,IAAIF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,EAAE;QACvC,IAAID,WAAW,EAAEE,MAAM,KAAK,CAAC,EACzB;QACJ,IAAIF,WAAW,KAAK,GAAG,EACnB;QACJ,IAAIA,WAAW,KAAK,IAAI,EAAE;UACtBD,sBAAsB,CAACI,GAAG,CAAC,CAAC;QAChC,CAAC,MACI;UACDJ,sBAAsB,CAACK,IAAI,CAACJ,WAAW,CAAC;QAC5C;MACJ;MACA,MAAMK,cAAc,GAAG,GAAGP,IAAI,EAAEQ,UAAU,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGP,sBAAsB,CAACrB,IAAI,CAAC,GAAG,CAAC,GAAGqB,sBAAsB,CAACG,MAAM,GAAG,CAAC,IAAIJ,IAAI,EAAES,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE;MACrK,MAAMC,aAAa,GAAGhH,SAAS,CAAC6G,cAAc,CAAC;MAC/C,OAAOG,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IAC7C;IACA,OAAOX,IAAI;EACf;EACA,MAAMvC,YAAYA,CAACb,QAAQ,EAAEiD,eAAe,EAAEe,UAAU,EAAEd,gBAAgB,EAAE;IACxE,MAAMnB,YAAY,GAAG,MAAM,IAAI,CAACiB,kBAAkB,CAAChD,QAAQ,EAAEiD,eAAe,EAAEC,gBAAgB,CAAC;IAC/F,MAAMvB,IAAI,GAAG,IAAI,IAAI,CAAC7C,MAAM,CAAC,MAAMkF,UAAU,CAAC;IAC9CrC,IAAI,CAACC,MAAM,CAAC7E,YAAY,CAACgF,YAAY,CAAC,CAAC;IACvC,OAAOnF,KAAK,CAAC,MAAM+E,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;EACrC;EACA/D,aAAaA,CAACY,WAAW,EAAEC,MAAM,EAAEqB,SAAS,EAAEpB,OAAO,EAAE;IACnD,OAAOd,aAAa,CAAC,IAAI,CAACe,MAAM,EAAEH,WAAW,EAAEsB,SAAS,EAAErB,MAAM,EAAEC,OAAO,IAAI,IAAI,CAACA,OAAO,CAAC;EAC9F;EACAkB,2BAA2BA,CAACpB,WAAW,EAAE;IACrC,IAAI,OAAOA,WAAW,KAAK,QAAQ,IAC/B,OAAOA,WAAW,CAAC8B,WAAW,KAAK,QAAQ,IAC3C,OAAO9B,WAAW,CAACsF,eAAe,KAAK,QAAQ,EAAE;MACjD,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;IAC9D;EACJ;AACJ;AACA,MAAMhE,UAAU,GAAIiE,GAAG,IAAK;EACxB,MAAMnE,QAAQ,GAAGzB,OAAO,CAAC4F,GAAG,CAAC,CAACJ,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EACnD,OAAO;IACH/D,QAAQ;IACRC,SAAS,EAAED,QAAQ,CAACoE,KAAK,CAAC,CAAC,EAAE,CAAC;EAClC,CAAC;AACL,CAAC;AACD,MAAMxD,sBAAsB,GAAIM,OAAO,IAAKuB,MAAM,CAACC,IAAI,CAACxB,OAAO,CAAC,CAACyB,IAAI,CAAC,CAAC,CAACX,IAAI,CAAC,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}