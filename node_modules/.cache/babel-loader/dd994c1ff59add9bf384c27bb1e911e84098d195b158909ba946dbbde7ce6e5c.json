{"ast":null,"code":"import { fromUtf8 } from \"@smithy/util-utf8\";\nimport { isEmptyData } from \"./isEmptyData\";\nimport { EMPTY_DATA_SHA_1, SHA_1_HASH, SHA_1_HMAC_ALGO } from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\nvar Sha1 = /** @class */function () {\n  function Sha1(secret) {\n    this.toHash = new Uint8Array(0);\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        locateWindow().crypto.subtle.importKey(\"raw\", convertToBuffer(secret), SHA_1_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n  Sha1.prototype.update = function (data) {\n    if (isEmptyData(data)) {\n      return;\n    }\n    var update = convertToBuffer(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n  Sha1.prototype.digest = function () {\n    var _this = this;\n    if (this.key) {\n      return this.key.then(function (key) {\n        return locateWindow().crypto.subtle.sign(SHA_1_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_1);\n    }\n    return Promise.resolve().then(function () {\n      return locateWindow().crypto.subtle.digest(SHA_1_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n  Sha1.prototype.reset = function () {\n    this.toHash = new Uint8Array(0);\n  };\n  return Sha1;\n}();\nexport { Sha1 };\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n  return new Uint8Array(data);\n}","map":{"version":3,"names":["fromUtf8","isEmptyData","EMPTY_DATA_SHA_1","SHA_1_HASH","SHA_1_HMAC_ALGO","locateWindow","Sha1","secret","toHash","Uint8Array","key","Promise","resolve","reject","crypto","subtle","importKey","convertToBuffer","then","catch","prototype","update","data","typedArray","byteLength","set","digest","_this","sign","reset","ArrayBuffer","isView","buffer","byteOffset","BYTES_PER_ELEMENT"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-crypto/sha1-browser/src/webCryptoSha1.ts"],"sourcesContent":["import { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@smithy/util-utf8\";\nimport { isEmptyData } from \"./isEmptyData\";\nimport { EMPTY_DATA_SHA_1, SHA_1_HASH, SHA_1_HMAC_ALGO } from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha1 implements Checksum {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_1_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_1_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_1);\n    }\n\n    return Promise.resolve()\n      .then(() => locateWindow().crypto.subtle.digest(SHA_1_HASH, this.toHash))\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n\n  reset(): void {\n    this.toHash = new Uint8Array(0);\n  }\n}\n\nfunction convertToBuffer(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}