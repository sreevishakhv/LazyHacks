{"ast":null,"code":"import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { doesIdentityRequireRefresh, isIdentityExpired, memoizeIdentityProvider, normalizeProvider } from \"@smithy/core\";\nimport { SignatureV4 } from \"@smithy/signature-v4\";\nexport const resolveAwsSdkSigV4Config = config => {\n  let isUserSupplied = false;\n  let normalizedCreds;\n  if (config.credentials) {\n    isUserSupplied = true;\n    normalizedCreds = memoizeIdentityProvider(config.credentials, isIdentityExpired, doesIdentityRequireRefresh);\n  }\n  if (!normalizedCreds) {\n    if (config.credentialDefaultProvider) {\n      normalizedCreds = normalizeProvider(config.credentialDefaultProvider(Object.assign({}, config, {\n        parentClientConfig: config\n      })));\n    } else {\n      normalizedCreds = async () => {\n        throw new Error(\"`credentials` is missing\");\n      };\n    }\n  }\n  const {\n    signingEscapePath = true,\n    systemClockOffset = config.systemClockOffset || 0,\n    sha256\n  } = config;\n  let signer;\n  if (config.signer) {\n    signer = normalizeProvider(config.signer);\n  } else if (config.regionInfoProvider) {\n    signer = () => normalizeProvider(config.region)().then(async region => [(await config.regionInfoProvider(region, {\n      useFipsEndpoint: await config.useFipsEndpoint(),\n      useDualstackEndpoint: await config.useDualstackEndpoint()\n    })) || {}, region]).then(([regionInfo, region]) => {\n      const {\n        signingRegion,\n        signingService\n      } = regionInfo;\n      config.signingRegion = config.signingRegion || signingRegion || region;\n      config.signingName = config.signingName || signingService || config.serviceId;\n      const params = {\n        ...config,\n        credentials: normalizedCreds,\n        region: config.signingRegion,\n        service: config.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath\n      };\n      const SignerCtor = config.signerConstructor || SignatureV4;\n      return new SignerCtor(params);\n    });\n  } else {\n    signer = async authScheme => {\n      authScheme = Object.assign({}, {\n        name: \"sigv4\",\n        signingName: config.signingName || config.defaultSigningName,\n        signingRegion: await normalizeProvider(config.region)(),\n        properties: {}\n      }, authScheme);\n      const signingRegion = authScheme.signingRegion;\n      const signingService = authScheme.signingName;\n      config.signingRegion = config.signingRegion || signingRegion;\n      config.signingName = config.signingName || signingService || config.serviceId;\n      const params = {\n        ...config,\n        credentials: normalizedCreds,\n        region: config.signingRegion,\n        service: config.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath\n      };\n      const SignerCtor = config.signerConstructor || SignatureV4;\n      return new SignerCtor(params);\n    };\n  }\n  return {\n    ...config,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: isUserSupplied ? async () => normalizedCreds().then(creds => setCredentialFeature(creds, \"CREDENTIALS_CODE\", \"e\")) : normalizedCreds,\n    signer\n  };\n};\nexport const resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;","map":{"version":3,"names":["setCredentialFeature","doesIdentityRequireRefresh","isIdentityExpired","memoizeIdentityProvider","normalizeProvider","SignatureV4","resolveAwsSdkSigV4Config","config","isUserSupplied","normalizedCreds","credentials","credentialDefaultProvider","Object","assign","parentClientConfig","Error","signingEscapePath","systemClockOffset","sha256","signer","regionInfoProvider","region","then","useFipsEndpoint","useDualstackEndpoint","regionInfo","signingRegion","signingService","signingName","serviceId","params","service","uriEscapePath","SignerCtor","signerConstructor","authScheme","name","defaultSigningName","properties","creds","resolveAWSSDKSigV4Config"],"sources":["/home/sv/LazyHacks/study-tracker-ui/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { doesIdentityRequireRefresh, isIdentityExpired, memoizeIdentityProvider, normalizeProvider, } from \"@smithy/core\";\nimport { SignatureV4 } from \"@smithy/signature-v4\";\nexport const resolveAwsSdkSigV4Config = (config) => {\n    let isUserSupplied = false;\n    let normalizedCreds;\n    if (config.credentials) {\n        isUserSupplied = true;\n        normalizedCreds = memoizeIdentityProvider(config.credentials, isIdentityExpired, doesIdentityRequireRefresh);\n    }\n    if (!normalizedCreds) {\n        if (config.credentialDefaultProvider) {\n            normalizedCreds = normalizeProvider(config.credentialDefaultProvider(Object.assign({}, config, {\n                parentClientConfig: config,\n            })));\n        }\n        else {\n            normalizedCreds = async () => {\n                throw new Error(\"`credentials` is missing\");\n            };\n        }\n    }\n    const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256, } = config;\n    let signer;\n    if (config.signer) {\n        signer = normalizeProvider(config.signer);\n    }\n    else if (config.regionInfoProvider) {\n        signer = () => normalizeProvider(config.region)()\n            .then(async (region) => [\n            (await config.regionInfoProvider(region, {\n                useFipsEndpoint: await config.useFipsEndpoint(),\n                useDualstackEndpoint: await config.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            config.signingRegion = config.signingRegion || signingRegion || region;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: normalizedCreds,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: config.signingName || config.defaultSigningName,\n                signingRegion: await normalizeProvider(config.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            config.signingRegion = config.signingRegion || signingRegion;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: normalizedCreds,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    return {\n        ...config,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: isUserSupplied\n            ? async () => normalizedCreds().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_CODE\", \"e\"))\n            : normalizedCreds,\n        signer,\n    };\n};\nexport const resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}